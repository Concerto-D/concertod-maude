fmod PROGRAM is
  
  inc COMPENENT-TYPE .
  inc IDENT-COMPENENT-BEHAVIOR .
  inc CONNECTION .
  sorts Program Instruction . ---define new sorts

  var Prog : Program .
  var l : Connection .
  var inst : Instruction .
  var idcx : IdentC .
  var idbehx : IdentB .
  var beh : Behavior .

  op add(_,_) : IdentC ComponentType -> Instruction .
  op del(_) : IdentC -> Instruction .
  op pushB(_,_,_) : IdentC Behavior IdentB -> Instruction .
  op con(_) : Connection -> Instruction .
  op dcon(_) : Connection -> Instruction .
  op wait(_,_) : IdentC IdentB -> Instruction .
  op [] : -> Program [ctor] .  ---operator is a constructor
  op _._ : Instruction Program -> Program [ctor] . ---operator is a constructor

 --- some operations related to Program used later
  op NotDcon(_,_) :  Connection Program -> Bool .  
  ---check for a given connection, there is no dcon instrcution in a given program
 
  eq NotDcon(l,[]) = true .
  eq NotDcon(l,inst . Prog) = (inst =/= dcon(l) and NotDcon(l,Prog)) .

  op disconnect(_,_) : Connection Program -> Bool .  
  --- used to check that the dcon instruction is the current instruction or has already been executed
  ---then it is the same as checking that the remaining program does not contain dcon after the current instruction
  --- this reasoning is correct if we assume that Concerto programs are well constructed.
  eq disconnect(l,[]) = true .
  eq disconnect(l,inst . Prog) = NotDcon(l,Prog) .
  
  op InstructionIspushB(_,_,_) : Instruction IdentC IdentB -> Bool .  
  --- checks whether the current instruction is a push instruction for a given IdentC and IdentB

  eq InstructionIspushB(pushB(idcx,beh,idbehx), idcx,idbehx ) = true .
  eq InstructionIspushB(inst, idcx,idbehx ) = false [owise] .

  op NotPushBProg(_,_,_) : IdentC IdentB Program -> Bool .  
  ---checks that in a given program there is no push behavior instruction for IdentC and IdentB
  
  eq NotPushBProg(idcx,idbehx, []) = true .
  ceq NotPushBProg(idcx,idbehx,inst . Prog) = NotPushBProg(idcx,idbehx,Prog) if (not InstructionIspushB(inst,idcx,idbehx)) .
  ceq NotPushBProg(idcx,idbehx,inst . Prog) = false if (InstructionIspushB(inst,idcx,idbehx)) .
  
endfm