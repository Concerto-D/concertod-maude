fmod PLACE is
  
  inc DECLARATION-SORTS .   
  sorts InitialPlace Places . 
  subsort InitialPlace < Place . 
  pr SET{Place} .   
  subsort Set{Place} <  Places  .  
   
endfm

fmod STATION is
  
  inc DECLARATION-SORTS .
  
  sort Stations .
  pr SET{Station} .   
  subsort Set{Station} <  Stations  . 

endfm

fmod STATION-PLACE is
  
  inc DECLARATION-SORTS . 
  inc PLACE .
  inc STATION .

  sort StationPlaces .
  pr SET{StationPlace} . 
  subsort Set{StationPlace} <  StationPlaces . 

  vars Ss1 Ss2 : Station .
  var S : Stations .
  var SPs : StationPlaces .
  var Q : Place .
  var Ps : Places .

  op (_;_) : Station Place -> StationPlace . 
  --- an element StationPlace is a tuple (Station;Place)

  op placeOfStation(_,_) : Station StationPlaces -> [Place] .
  op not-found : -> [Place] . 
  --- gives the corresponding place for a station according to the "StationPlaces" set 
  eq placeOfStation(Ss1, ((Ss1 ; Q),SPs)) = Q  .
  eq placeOfStation(Ss1, SPs) = not-found [owise] . 
  
  ---eq placeOfStation(Ss1, ((Ss1 ; Q),SPs)) = Q  .
  ---eq placeOfStation(Ss1, ((Ss2 ; Q),SPs)) = placeOfStation(Ss1,SPs) [owise] . 
  ---  case not-found not processed, each station has a place and it is in the stationPlaces esnemble. 

  op stationsGroupPlaces(_,_) : Places StationPlaces -> Stations .  
  --- gives the stations associated to a Places group
  eq stationsGroupPlaces(Ps,empty) = empty .
  ceq stationsGroupPlaces(Ps,((Ss1 ; Q),SPs)) = Ss1, stationsGroupPlaces(Ps,SPs) if(Q in Ps) .
  eq stationsGroupPlaces(Ps,((Ss1 ; Q),SPs)) =  stationsGroupPlaces(Ps,SPs) [owise] .


endfm




fmod ID-COMPONENT-BEHAVIOR is
  
  inc DECLARATION-SORTS . 
  
  sorts IdInstances IdBehavior  . 
  pr SET{IdInstance} .
  subsort Set{IdInstance} < IdInstances . 
  
endfm

fmod PORT is
  
  sort Port .
  sorts UsePort ProvidePort .
  subsorts UsePort ProvidePort < Port .

endfm



fmod CONNECTION is
  
  inc DECLARATION-SORTS . 
  inc ID-COMPONENT-BEHAVIOR .
  inc PORT .
  
  sort  Connections . 
  pr SET{Connection} .  
  subsort Set{Connection} < Connections . 

  var Lx : Connections .   
  vars Use Use1 : UsePort .  
  var Pro : ProvidePort .   
  vars Id Id1 Id2 : IdInstance .  


  op (_,_,_,_) : IdInstance UsePort IdInstance ProvidePort -> Connection .  
  --- Define a new operator to create a Connection

  --- some operations related to the connections used later
  op inConnectionIdentUsePort(_,_,_) :  IdInstance UsePort Connections -> Bool . 
  --- checks whether an instance is connected via a particular use port
  eq inConnectionIdentUsePort(Id,Use,((Id,Use,Id2,Pro),Lx)) = true  .  
  eq inConnectionIdentUsePort(Id,Use,Lx) = false [owise] .  

  op inConnectionIdent(_,_) :  IdInstance Connections -> Bool .   
  --- checks whether an instance is connected (via use or provide port)
  ceq inConnectionIdent(Id,((Id1,Use,Id2,Pro),Lx)) = true if (Id1 == Id or Id2 == Id) .  
  eq inConnectionIdent(Id,Lx) = false [owise] .  

  op connectionProIdent(_,_) :  IdInstance Connections -> Connections .  
  --- checks restriction on connections for an instance which is in role provide Port within connections
  eq connectionProIdent(Id,empty) = empty .
  eq connectionProIdent(Id2,((Id1,Use,Id2,Pro),Lx)) = (Id1,Use,Id2,Pro), connectionProIdent(Id2,Lx)  .  
  eq connectionProIdent(Id,((Id1,Use,Id2,Pro),Lx)) = connectionProIdent(Id,Lx) [owise] .  

endfm


fmod REQUEST is

  inc ID-COMPONENT-BEHAVIOR . 
  inc PORT .
  inc CONNECTION .
  
  sorts Query .

  op isActive(_) :  Port -> Query [ctor] .  
  op isRefusing(_) : Port -> Query [ctor] .    
  op isConnected(_) : Connection -> Query [ctor] .  
  op isDisconnect(_) : Connection -> Query [ctor] .  
  op isCompleted(_) : IdBehavior -> Query [ctor] .  
  
  op [ dst: _ , query: _ ] : IdInstance Query -> Request [ctor] .

  
endfm


fmod ANSWER is 
  inc REQUEST . 

  op [ req: _, value: _ ] : Request Bool -> Answer [ctor] .
endfm


fmod MESSAGE is
   inc REQUEST .
   inc ANSWER .

   op reqMsg : Request -> Message [ctor] .
   op ansMsg : Answer -> Message [ctor] .

endfm


fmod TRANSITION-TRANSITION-ENDING is
  inc PLACE .
  inc STATION .
  inc DECLARATION-SORTS .
  sorts Transitions TransitionEndings .  
   
  pr SET{Transition} .
  subsort Set{Transition} < Transitions .
  
  pr SET{TransitionEnding} .
  subsort Set{TransitionEnding} < TransitionEndings . 
 
  op t(_,_) : Place Stations -> Transition .  
  op te(_,_) : Transition Station -> TransitionEnding . 

  var P1 P2 : Place .
  var Ps : Places .
  vars Ss1 Ss2 : Stations .
  vars S1 S2 : Station .
  var Ts : Transitions .
  var Tes : TransitionEndings .

  --- some operations related to Transition and TransitionEnding used later
  op placesSourceOfTransitions(_) : Transitions -> Places .  
  --- retrieves the set of source places linked to certain transitions
  eq placesSourceOfTransitions(empty) = empty .
  eq placesSourceOfTransitions((t(P1,Ss1),Ts)) = P1, placesSourceOfTransitions(Ts) .

  op restrictTransitionsToPlace(_,_) : Transitions Place -> Transitions . 
  --- restrict transitions to those linked to a particular place
  
  eq restrictTransitionsToPlace(empty,P1) = empty .
  eq restrictTransitionsToPlace((t(P1,Ss1),Ts),P1) = t(P1,Ss1), restrictTransitionsToPlace(Ts,P1)  .
  eq restrictTransitionsToPlace((t(P2,Ss1),Ts),P1) = restrictTransitionsToPlace(Ts,P1) [owise] .
 
  op removeTransitionEndingStation(_,_) : TransitionEndings Station -> TransitionEndings . 
  --- delete transition endings of a station 
  
  eq removeTransitionEndingStation(empty,S1) = empty .
  eq removeTransitionEndingStation((te(t(P1,Ss1),S1),Tes),S1) = removeTransitionEndingStation(Tes,S1) .
  eq removeTransitionEndingStation((te(t(P1,Ss1),S1),Tes),S2) = te(t(P1,Ss1),S1),removeTransitionEndingStation(Tes,S2) [owise] .
  
  op transitionsOfPlacesWithRespectToStations(_,_,_) : Places Transitions Stations -> Transitions .   
 ---retrieve transitions starting from a place of a set of places and ending in stations included in the set of stations of these places.
  
  eq transitionsOfPlacesWithRespectToStations(Ps,empty,Ss1) = empty .
  ceq transitionsOfPlacesWithRespectToStations(Ps,(t(P1,Ss2),Ts),Ss1) = t(P1,Ss2), transitionsOfPlacesWithRespectToStations(Ps,Ts,Ss1) if ((P1 in Ps) and (Ss2 subset Ss1)) .
  eq transitionsOfPlacesWithRespectToStations(Ps,(t(P1,Ss2),Ts),Ss1) = transitionsOfPlacesWithRespectToStations(Ps,Ts,Ss1) [owise] .
 
  op transitionEndingsOfOneTransition(_,_) : Transition Stations -> TransitionEndings .  
  ---Construct the transition endings of a transition according to a set of Stations
  eq transitionEndingsOfOneTransition(t(P1,Ss2),empty) = empty . 
  eq transitionEndingsOfOneTransition(t(P1,Ss2), (S1,Ss1)) = union(te(t(P1,Ss2),S1), transitionEndingsOfOneTransition(t(P1,Ss2), Ss1) ) .


  op transitionEndingsOfTransitions(_) : Transitions -> TransitionEndings .  
  ---Construct the transition endings of a set of transitions
  eq transitionEndingsOfTransitions(empty) = empty .
  eq transitionEndingsOfTransitions(t(P1,Ss1),Ts) = union(transitionEndingsOfOneTransition(t(P1,Ss1),Ss1), transitionEndingsOfTransitions(Ts) ) .


  op isSatisfiedTransitionEndingStation(_,_,_) : Station Transitions TransitionEndings -> Bool .
  --- is used in the entering place rule
  --- the parameters used are : a chosen station, the current transitions of a behavior and the transition endings of the instance concerned
  --- the principale is : if a station is chosen as a station of the ending of a transition 
  --- then for all transitions of the current behavior for which the chosen station is one of its stations
  --- the transition endings of these transitions according to this station must be included in their trnasition endings.
  eq isSatisfiedTransitionEndingStation(S1,empty,Tes) = true .
  ceq isSatisfiedTransitionEndingStation(S1,t(P1,Ss1),Ts,Tes) = isSatisfiedTransitionEndingStation(S1,Ts,Tes) 
  if(not(S1 in Ss1) or (te(t(P1,Ss1),S1) in Tes) ) .
  eq isSatisfiedTransitionEndingStation(S1,t(P1,Ss1),Ts,Tes) = false [owise] .

endfm

fmod MARKING is
  inc TRANSITION-TRANSITION-ENDING .
  sort Marking . 
  
  vars Ps1 Ps2 : Places .
  vars Ts1 Ts2 : Transitions .
  vars Tes1 Tes2 : TransitionEndings .
  
  op m(_,_,_) : Places Transitions TransitionEndings -> Marking .  
  
  op placesOfMarking : Marking -> Places . 
  ---- gives the places of a marking
  eq placesOfMarking(m(Ps1,Ts1,Tes1)) = Ps1 .

  op transitionsOfMarking : Marking -> Transitions . 
  --- gives the transitions of a marking
  eq transitionsOfMarking(m(Ps1,Ts1,Tes1)) = Ts1 .

  op transitionEndingsOfMarking : Marking -> TransitionEndings . 
  --- gives the transition endings of a marking
  eq transitionEndingsOfMarking(m(Ps1,Ts1,Tes1)) = Tes1 .

  op  intersectionMarkings(_,_) : Marking Marking -> Marking . 
  --- intersection of two markings
  eq  intersectionMarkings(m(Ps1,Ts1,Tes1),m(Ps2,Ts2,Tes2)) = 
  m(intersection(Ps1,Ps2),intersection(Ts1,Ts2),intersection(Tes1,Tes2)) .

  op notEmptyMarking(_) : Marking -> Bool .  
  ---to check if a given Marking is empty
  eq notEmptyMarking(m(Ps1,Ts1,Tes1)) = (Ps1 =/= empty or Ts1 =/= empty or Tes1 =/= empty ) .

endfm

fmod BEHAVIOR is
  
  inc TRANSITION-TRANSITION-ENDING .
  inc ID-COMPONENT-BEHAVIOR .

  pr DECLARATION-SORTS .
  sorts Behaviors .  
  pr SET{Behavior} .
  subsort Set{Behavior} < Behaviors .  
  pr LIST{BehaviorWithId} .
  --- List{BehaviorWithId} est une liste pour les element de sort BehaviorWithId 

  vars IdBehx IdBehy : IdBehavior .
  var BehL : List{BehaviorWithId} .
  var Beh : Behavior .

  op b(_) : Transitions -> Behavior .   
  ---a behavoir is a set of transitions
  op (_;_) : IdBehavior Behavior -> BehaviorWithId . 
  ---BehaviorWithId is an identified behavior

  op existIdBehaviorehListBeh(_,_) : IdBehavior List{BehaviorWithId} -> Bool .  
  ---to check if a behavior identifier is used in the behavior list  
  eq existIdBehaviorehListBeh(IdBehx, nil) = false .
  eq existIdBehaviorehListBeh(IdBehx, (IdBehx ; Beh) BehL) = true .
  eq existIdBehaviorehListBeh(IdBehx, (IdBehy ; Beh) BehL) = existIdBehaviorehListBeh(IdBehx,BehL) [owise] .

endfm
