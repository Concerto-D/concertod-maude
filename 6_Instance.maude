fmod INSTANCE is
  
  inc COMPENENT-TYPE .
  inc BEHAVIOR .
  inc IDENT-COMPENENT-BEHAVIOR .
  inc MARKING . 
  inc DECLARATION-SORTS . ------ to include the defined sort instance
  sort Instances .
  pr SET{Instance} .
  subsort Set{Instance} < Instances . 

  vars pla1 pla2 : Place . 
  var ps : Places .
  vars  idcx idcy : IdentInstance .
  var idbeh : IdentBehavior .
  vars S1 S2 : Stations .
  var bl : QBehaviorWithId .
  var mark : Marking .
  var por : Port . 
  vars t t1 : Transitions .
  var tre : TransitionEndings .
  var ct : ComponentType .
  var Is : Instances .

  op <_,_,_,_> : IdentInstance ComponentType QBehaviorWithId Marking -> Instance . ---Instance definition

  op IdentOfInstance(_) : Instance -> IdentInstance .  --- gives the id of an instance

  eq IdentOfInstance(< idcx,ct,bl,mark > ) = idcx .

  op IsUsedIdentInstances(_,_) : IdentInstance Instances -> Bool . ---to check if an id of instance is used in the set of instances

  eq IsUsedIdentInstances(idcx, empty) = false .
  eq IsUsedIdentInstances(idcx, (< idcx,ct,bl,mark >, Is)) = true  .
  eq IsUsedIdentInstances(idcx, (< idcy,ct,bl,mark >, Is)) = IsUsedIdentInstances(idcx, Is) [owise] .

  op InstanceOfIdent(_,_) : Instances IdentInstance -> Instance . ---gives the instance identified by a given Id
  --- applied only when we are sure that the instance exists. 
  --- So the problem of empty instances doesn't occur.
  eq  InstanceOfIdent((< idcx,ct,bl,mark >  ,Is) , idcx ) = < idcx,ct,bl,mark >  .
  eq  InstanceOfIdent((< idcy,ct,bl,mark > ,Is) , idcx ) =  InstanceOfIdent(Is,idcx) [owise] .

  op AllTranOfPlaceQuitGroup(_,_,_) : Place Transitions Stations -> Bool .  
  --- check that for a given place and for all its transitions, the stations of its transitions are different from the stations given as parameters
  --- used later to express that places in a group necessarily leave the group according to current behavior
  eq  AllTranOfPlaceQuitGroup(pla1,empty,S1) = true .
  ceq AllTranOfPlaceQuitGroup(pla1,(t(pla2,S1),t1),S2) = AllTranOfPlaceQuitGroup(pla1,t1,S2) if ((pla1 =/= pla2)  or   intersection(S1,S2) == empty ) .  
  eq  AllTranOfPlaceQuitGroup(pla1,(t(pla2,S1),t1),S2) = false [owise] .

  op ExistTranOfPlace(_,_) : Place Transitions -> Bool .  
  --- check whether for a place and a set of transitions there is a transition among these transitions whose source place is the place in question .
  eq  ExistTranOfPlace(pla1,empty) = false .
  eq  ExistTranOfPlace(pla1,t(pla1,S1),t1) = true .
  eq  ExistTranOfPlace(pla1,t(pla2,S1),t1) = ExistTranOfPlace(pla1,t1)  [owise].

  op PlaceExitGroup(_,_,_) : Place QBehaviorWithId Stations -> Bool .  
  --- check if a place leaves a group of places according to the current behavior and with respect to the stations associated with the places of the group.
  eq PlaceExitGroup(pla1,nil,S1) = false . ---because de behavior is nil, a place "puit" does not leave the group 
  eq PlaceExitGroup(pla1,(idbeh ; b(t1)) bl,S1) = ExistTranOfPlace(pla1,t1) and AllTranOfPlaceQuitGroup(pla1,t1,S1) . --- not "puit" and all transitions leave the group

  op AllPlacesExitGroup(_,_,_) : Places QBehaviorWithId Stations -> Bool .  
  --- check whether for certain places and according to the current transitions in the behavior list 
  ---the transitions of these places necessarily leave the group. this last condition is determined on the stations associated with the places (3rd parameter).
  eq AllPlacesExitGroup(empty,bl,S1) = true .  --- empty places satisfay all transitions of empty exit group
  eq AllPlacesExitGroup((pla1,ps),bl,S1)  = PlaceExitGroup(pla1,bl,S1) and AllPlacesExitGroup(ps,bl,S1) .  

  op active(_,_) : Instance Port -> Bool .   --- active function
  ---valid when at least the places, tansitions or transition endings marking is non-empty for a given port
  eq active(< idcx,ct,bl,m(ps,t,tre) >,por) = NotEmptyMarking(IntersectionMarkings(MarkingWithRespectToPlaces( GroupPlacesofPort(por,ct),ct),m(ps,t,tre))) .

  op activeMarking(_,_,_) : Instance Port Marking -> Bool . --- special case of active with 3 parameters

  eq activeMarking(< idcx,ct,bl,m(ps,t,tre) >,por,mark) = NotEmptyMarking(IntersectionMarkings(MarkingWithRespectToPlaces(GroupPlacesofPort(por,ct),ct),mark)) .

  op refusing(_,_) : Instance Port -> Bool .  --- refusing function
  --- a port is refused when only places are marked, 
  ---and all marked places are ready to leave the group of places of the port according to the current behavior.
  
  
  ceq refusing(< idcx,ct,bl,m(ps,t,tre) >,por) = true if  
  (AllPlacesExitGroup(PlacesOfMarking(IntersectionMarkings(MarkingWithRespectToPlaces(GroupPlacesofPort(por, ct),ct),m(ps,t,tre))),bl,StationsGroupPlaces(GroupPlacesofPort(por,ct),GetStationPlaces(ct))) and
  TransitionsOfMarking(IntersectionMarkings(MarkingWithRespectToPlaces(GroupPlacesofPort(por,ct),ct),m(ps,t,tre))) == empty and 
  TransitionEndingsOfMarking(IntersectionMarkings(MarkingWithRespectToPlaces(GroupPlacesofPort(por,ct),ct),m(ps,t,tre))) == empty 
   )  .

  eq refusing(< idcx,ct,bl,m(ps,t,tre) >,por) = false [owise] .





endfm

--- Penser Ã  modifier les repetitions des fonction IntersectionMarking(MarkingWithRespectToPlaces(G(por,ct),ct),m(ps,t,tre)) pour un seul calcul  
---eleminier les repetition de calcul