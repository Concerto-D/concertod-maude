fmod LISTENER-SENSOR-EXAMPLE is 
	inc CONCERTO-D-SYSTEM .
	inc CONSISTENCY-PORTS-FIRING-TRANSITION .
	inc CONSISTENCY-PORTS-ENTERING-PLACE .
	inc COLLECT-EXTERNAL-MESSAGES-FIRING .
	inc COLLECT-EXTERNAL-MESSAGES-WAIT .
	inc COLLECT-EXTERNAL-MESSAGES-DISCONNECT .
	inc COLLECT-EXTERNAL-MESSAGES-ENTERING-PLACE .
	inc UPDATE-COMMUNICATION-MESSAGES .

	op connectionsNode1 : -> Connections .
	op sensor1 : -> Id .
	ops stlistenerRunning stlistenerConfigured stlistenerPaused stlistenerOff : -> Station .
	ops stsystemDeployed stsystemConfigured stsystemInitiated : -> Station .
	op instMydb0 : -> Instance .
	ops sensorRcvservice sensorConfigservice : -> UsePort .
	ops systemDeploy11 systemDeploy12 systemDeploy13 systemDeploy2 systemInterrupt1 systemStop1 : -> Transition .
	op connectionsNode2 : -> Connections .
	ops sensorRunning sensorConfigured sensorInstalled sensorProvisioned sensorOff : -> Place .
	ops listenerDeploy listenerUpdate listenerDestroy : -> Behavior .
	ops databaseService : -> ProvidePort .
	op listener1 : -> Id .
	op listenerOff : -> InitialPlace .
	op msgsNode3 : ->  Map{Question, Bool} .
	op connectionsNode3 : -> Connections .
	op sensor : -> ComponentType .
	ops systemDbservice : -> UsePort .
	op database : -> ComponentType .
	ops databaseInitiated databaseConfigured databaseBootstrapped databaseDeployed databaseRegistered : -> Place .
	ops systemDeploy systemInterrupt systemStop : -> Behavior .
	ops listenerDeploy1 listenerDeploy2 listenerDeploy3 listenerUpdate1 listenerDestroy1 : -> Transition .
	ops listenerRunning listenerConfigured listenerPaused listenerOff : -> Place .
	ops databaseDeploy11 databaseDeploy12 databaseDeploy2 databaseDeploy3 databaseInterrupt1 databasePause1 databaseUpdate databaseUninstall1 : -> Transition .
	ops systemService : -> ProvidePort .
	ops stdatabaseInitiated stdatabaseConfigured stdatabaseBootstrapped stdatabaseDeployed stdatabaseRegistered : -> Station .
	op msgsNode1 : ->  Map{Question, Bool} .
	ops systemDeployed systemConfigured systemInitiated : -> Place .
	ops listenerSysservice : -> UsePort .
	ops sensorStart sensorPause sensorStop : -> Behavior .
	ops sensorStart11 sensorStart12 sensorStart13 sensorStart2 sensorStart3 sensorStart4 sensorPause1 sensorStop1 : -> Transition .
	op instMysys0 : -> Instance .
	op systemInitiated : -> InitialPlace .
	op system : -> ComponentType .
	op mysys0 : -> Id .
	op instSensor1 : -> Instance .
	op msgsNode2 : ->  Map{Question, Bool} .
	ops databaseDeploy databaseInterrupt databasePause databaseUpdate databaseUninstall : -> Behavior .
	op instListener1 : -> Instance .
	op sensorOff : -> InitialPlace .
	op listener : -> ComponentType .
	op mydb0 : -> Id .
	ops listenerRcv listenerConfig : -> ProvidePort .
	ops stsensorRunning stsensorConfigured stsensorInstalled stsensorProvisioned stsensorOff : -> Station .
	op databaseInitiated : -> InitialPlace .
	eq databaseInterrupt1 = t(databaseDeployed, stdatabaseRegistered) .
	eq instMysys0 = { type: system, queue: nil, marking: m(systemDeployed, empty, empty) } .
	eq listenerDeploy = b(listenerDeploy1,listenerDeploy2,listenerDeploy3) .
	eq systemDeploy12 = t(systemInitiated, stsystemConfigured) .
	eq databaseUninstall1 = t(databaseRegistered, stdatabaseInitiated) .
	eq systemStop1 = t(systemDeployed, stsystemInitiated) .
	eq databaseDeploy12 = t(databaseInitiated, stdatabaseConfigured) .
	eq msgsNode3 = [ dst: listener1, query: isConnected((sensor1,sensorRcvservice)--(listener1,listenerRcv)) ] |-> true, [ dst: listener1 , query: isRefusing(listenerRcv) ] |-> false, [ dst: listener1, query: isConnected((sensor1,sensorConfigservice)--(listener1,listenerConfig)) ] |-> true, [ dst: listener1 , query: isRefusing(listenerConfig) ] |-> false .
	eq msgsNode1 = empty .
	eq sensorStart3 = t(sensorInstalled, stsensorConfigured) .
	eq databaseDeploy3 = t(databaseBootstrapped, stdatabaseDeployed) .
	eq sensorStart2 = t(sensorProvisioned, stsensorInstalled) .
	eq msgsNode2 = [ dst: mydb0 , query: isRefusing(databaseService) ] |-> false, [ dst: mysys0 , query: isRefusing(systemService) ] |-> false, [ dst: mydb0, query: isConnected((mysys0,systemDbservice)--(mydb0,databaseService)) ] |-> true, [ dst: mysys0, query: isConnected((listener1,listenerSysservice)--(mysys0,systemService)) ] |-> true .
	eq instListener1 = { type: listener, queue: nil, marking: m(listenerRunning, empty, empty) } .
	eq listenerDeploy2 = t(listenerPaused, stlistenerConfigured) .
	eq sensorStart13 = t(sensorOff, stsensorProvisioned) .
	eq instSensor1 = { type: sensor, queue: nil, marking: m(sensorRunning, empty, empty) } .
	eq system = { places: systemDeployed,systemConfigured,systemInitiated, initial: systemInitiated, stationPlaces: [stsystemDeployed](systemDeployed), [stsystemConfigured](systemConfigured), [stsystemInitiated](systemInitiated), transitions: (systemDeploy11, systemDeploy12, systemDeploy13, systemDeploy2, systemInterrupt1, systemStop1), behaviors: (systemDeploy, systemInterrupt, systemStop), groupUses: g(systemDbservice ? (systemDeployed, systemConfigured)), groupProvides: g(systemService ! (systemDeployed)) } .
	eq sensor = { places: sensorRunning,sensorConfigured,sensorInstalled,sensorProvisioned,sensorOff, initial: sensorOff, stationPlaces: [stsensorRunning](sensorRunning), [stsensorConfigured](sensorConfigured), [stsensorInstalled](sensorInstalled), [stsensorProvisioned](sensorProvisioned), [stsensorOff](sensorOff), transitions: (sensorStart11, sensorStart12, sensorStart13, sensorStart2, sensorStart3, sensorStart4, sensorPause1, sensorStop1), behaviors: (sensorStart, sensorPause, sensorStop), groupUses: g(sensorRcvservice ? (sensorConfigured, sensorRunning)), g(sensorConfigservice ? (sensorConfigured, sensorInstalled, sensorRunning)), groupProvides: empty } .
	eq sensorStart11 = t(sensorOff, stsensorProvisioned) .
	eq databasePause1 = t(databaseRegistered, stdatabaseBootstrapped) .
	eq databaseDeploy = b(databaseDeploy11,databaseDeploy12,databaseDeploy2,databaseDeploy3) .
	eq databaseUpdate = b(databaseUpdate) .
	eq sensorStart12 = t(sensorOff, stsensorProvisioned) .
	eq databaseUninstall = b(databaseUninstall1) .
	eq instMydb0 = { type: database, queue: nil, marking: m(databaseDeployed, empty, empty) } .
	eq sensorStart = b(sensorStart11,sensorStart12,sensorStart13,sensorStart2,sensorStart3,sensorStart4) .
	eq database = { places: databaseInitiated,databaseConfigured,databaseBootstrapped,databaseDeployed,databaseRegistered, initial: databaseInitiated, stationPlaces: [stdatabaseInitiated](databaseInitiated), [stdatabaseConfigured](databaseConfigured), [stdatabaseBootstrapped](databaseBootstrapped), [stdatabaseDeployed](databaseDeployed), [stdatabaseRegistered](databaseRegistered), transitions: (databaseDeploy11, databaseDeploy12, databaseDeploy2, databaseDeploy3, databaseInterrupt1, databasePause1, databaseUpdate, databaseUninstall1), behaviors: (databaseDeploy, databaseInterrupt, databasePause, databaseUpdate, databaseUninstall), groupUses: empty, groupProvides: g(databaseService ! (databaseDeployed)) } .
	eq databasePause = b(databasePause1) .
	eq connectionsNode3 = (sensor1, sensorConfigservice)--(listener1, listenerConfig), (sensor1, sensorRcvservice)--(listener1, listenerRcv) .
	eq connectionsNode1 = (mysys0, systemDbservice)--(mydb0, databaseService) .
	eq systemDeploy2 = t(systemConfigured, stsystemDeployed) .
	eq systemStop = b(systemStop1) .
	eq systemDeploy13 = t(systemInitiated, stsystemConfigured) .
	eq systemInterrupt1 = t(systemDeployed, stsystemConfigured) .
	eq listener = { places: listenerRunning,listenerConfigured,listenerPaused,listenerOff, initial: listenerOff, stationPlaces: [stlistenerRunning](listenerRunning), [stlistenerConfigured](listenerConfigured), [stlistenerPaused](listenerPaused), [stlistenerOff](listenerOff), transitions: (listenerDeploy1, listenerDeploy2, listenerDeploy3, listenerUpdate1, listenerDestroy1), behaviors: (listenerDeploy, listenerUpdate, listenerDestroy), groupUses: g(listenerSysservice ? (listenerConfigured, listenerRunning)), groupProvides: g(listenerRcv ! (listenerRunning)), g(listenerConfig ! (listenerConfigured, listenerRunning)) } .
	eq sensorStart4 = t(sensorConfigured, stsensorRunning) .
	eq listenerDestroy1 = t(listenerPaused, stlistenerOff) .
	eq listenerUpdate = b(listenerUpdate1) .
	eq systemDeploy = b(systemDeploy11,systemDeploy12,systemDeploy13,systemDeploy2) .
	eq databaseUpdate = t(databaseRegistered, stdatabaseConfigured) .
	eq connectionsNode2 = (sensor1, sensorConfigservice)--(listener1, listenerConfig), (listener1, listenerSysservice)--(mysys0, systemService), (mysys0, systemDbservice)--(mydb0, databaseService), (sensor1, sensorRcvservice)--(listener1, listenerRcv) .
	eq listenerDestroy = b(listenerDestroy1) .
	eq sensorPause1 = t(sensorRunning, stsensorProvisioned) .
	eq listenerDeploy3 = t(listenerConfigured, stlistenerRunning) .
	eq databaseDeploy11 = t(databaseInitiated, stdatabaseConfigured) .
	eq databaseDeploy2 = t(databaseConfigured, stdatabaseBootstrapped) .
	eq databaseInterrupt = b(databaseInterrupt1) .
	eq listenerDeploy1 = t(listenerOff, stlistenerPaused) .
	eq sensorStop = b(sensorStop1) .
	eq sensorStop1 = t(sensorProvisioned, stsensorOff) .
	eq systemDeploy11 = t(systemInitiated, stsystemConfigured) .
	eq systemInterrupt = b(systemInterrupt1) .
	eq listenerUpdate1 = t(listenerRunning, stlistenerPaused) .
	eq sensorPause = b(sensorPause1) .
	ops idb1 idb5 idb0 idb4 : -> Id . 
	op confNode1 : ->  LocalConfiguration .
	eq confNode1 = < nodeInventory: mydb0, instances: mydb0 |-> instMydb0, connections: connectionsNode1, program: nil, externState: msgsNode1, pendingQuestions: nil, outgoingQuestions: nil, history: empty, incomingMsgs: nil > .
	op confNode2 : ->  LocalConfiguration .
	eq confNode2 = < nodeInventory: mysys0, listener1, instances: mysys0 |-> instMysys0, listener1 |-> instListener1, connections: connectionsNode2, program: pushB(listener1, listenerUpdate, idb4) pushB(listener1, listenerDeploy, idb5), externState: msgsNode2, pendingQuestions: nil, outgoingQuestions: nil, history: empty, incomingMsgs: nil > .
	op confNode3 : ->  LocalConfiguration .
	eq confNode3 = < nodeInventory: sensor1, instances: sensor1 |-> instSensor1, connections: connectionsNode3, program: pushB(sensor1, sensorPause, idb0) wait(listener1, idb4) pushB(sensor1, sensorStart, idb1), externState: msgsNode3, pendingQuestions: nil, outgoingQuestions: nil, history: empty, incomingMsgs: nil > .
	op globalsystem : -> System .
	eq globalsystem = confNode1, confNode2, confNode3 . 
endfm 
    
