fmod LISTENER-SENSOR-EXAMPLE is 
        inc NET-D-CONFIGURATION .
        inc CONSISTENCY-PORTS-FIRING-TRANSITION .
        inc CONSISTENCY-PORTS-ENTERING-PLACE .
        inc COLLECT-EXTERNAL-MESSAGES-FIRING .
        inc COLLECT-EXTERNAL-MESSAGES-WAIT .
        inc COLLECT-EXTERNAL-MESSAGES-DISCONNECT .
        inc COLLECT-EXTERNAL-MESSAGES-ENTERING-PLACE .
        inc UPDATE-COMMUNICATION-MESSAGES .

        op listener1 : -> Id .
        ops systemDeploy systemInterrupt systemStop : -> Behavior .
        op connectionsNode3 : -> Connections .
        ops databaseInitiated databaseConfigured databaseBootstrapped databaseDeployed databaseRegistered : -> Place .        
        ops sensorRunning sensorConfigured sensorInstalled sensorProvisioned sensorOff : -> Place .
        op instSensor1 : -> Instance .
        ops stlistenerRunning stlistenerConfigured stlistenerPaused stlistenerOff : -> Station .
        op mydb0 : -> Id .
        op instMydb0 : -> Instance .
        ops stdatabaseInitiated stdatabaseConfigured stdatabaseBootstrapped stdatabaseDeployed stdatabaseRegistered : -> Station .
        op sensor1 : -> Id .
        ops sensorRcvservice sensorConfigservice : -> UsePort .
        ops sensorDeploy sensorPause sensorStop : -> Behavior .
        op system : -> ComponentType .
        ops stsensorRunning stsensorConfigured stsensorInstalled stsensorProvisioned stsensorOff : -> Station .
        op instMysys0 : -> Instance .
        op instListener1 : -> Instance .
        ops listenerRunning listenerConfigured listenerPaused listenerOff : -> Place .
        ops systemDeployed systemConfigured systemInitiated : -> Place .
        op listenerOff : -> InitialPlace .
        ops systemDbservice : -> UsePort .
        ops systemService : -> ProvidePort .
        op database : -> ComponentType .
        ops databaseDeploy databaseInterrupt databasePause databaseUpdate databaseUninstall : -> Behavior .
        ops listenerRcv listenerConfig : -> ProvidePort .
        ops stsystemDeployed stsystemConfigured stsystemInitiated : -> Station .
        op databaseInitiated : -> InitialPlace .
        ops databaseDeploy11 databaseDeploy12 databaseDeploy2 databaseDeploy3 databaseInterrupt1 databasePause1 databaseUpdate databaseUninstall1 : -> Transition .
        op connectionsNode1 : -> Connections .
        op systemInitiated : -> InitialPlace .
        op sensorOff : -> InitialPlace .
        ops listenerDeploy1 listenerDeploy2 listenerDeploy3 listenerUpdate1 listenerDestroy1 : -> Transition .
        op mysys0 : -> Id .
        op sensor : -> ComponentType .
        op connectionsNode2 : -> Connections .
        ops listenerSysservice : -> UsePort .
        ops listenerDeploy listenerUpdate listenerDestroy : -> Behavior .
        ops systemDeploy11 systemDeploy12 systemDeploy13 systemDeploy2 systemInterrupt1 systemStop1 : -> Transition .
        op listener : -> ComponentType .
        ops sensorDeploy11 sensorDeploy12 sensorDeploy13 sensorDeploy2 sensorDeploy3 sensorDeploy4 sensorPause1 sensorStop1 : -> Transition .
        op databaseService : -> ProvidePort .
        eq systemDeploy12 = t(systemInitiated, stsystemConfigured) .
        eq databaseUpdate = b(databaseUpdate) .
        eq database = { places: databaseInitiated,databaseConfigured,databaseBootstrapped,databaseDeployed,databaseRegistered, 
        initial: databaseInitiated, stationPlaces: [stdatabaseInitiated](databaseInitiated), [stdatabaseConfigured](databaseConfigured), [stdatabaseBootstrapped](databaseBootstrapped), [stdatabaseDeployed](databaseDeployed), [stdatabaseRegistered](databaseRegistered), transitions: (databaseDeploy11, databaseDeploy12, databaseDeploy2, databaseDeploy3, databaseInterrupt1, databasePause1, databaseUpdate, databaseUninstall1), behaviors: (databaseDeploy, databaseInterrupt, databasePause, databaseUpdate, databaseUninstall), groupUses: empty, groupProvides: g(databaseService ! (databaseDeployed)) } .
        eq databasePause1 = t(databaseRegistered, stdatabaseBootstrapped) .
        eq instListener1 = { type: listener, queue: nil, marking: m(listenerRunning, empty, empty) } .
        
        eq listenerDeploy = b(listenerDeploy1,listenerDeploy2,listenerDeploy3) .
        eq systemStop1 = t(systemDeployed, stsystemInitiated) .
        eq databaseUninstall = b(databaseUninstall1) .
        eq instSensor1 = { type: sensor, queue: nil, marking: m(sensorRunning, empty, empty) } .
       
        eq sensorDeploy4 = t(sensorConfigured, stsensorRunning) .
        eq databaseUpdate = t(databaseRegistered, stdatabaseConfigured) .
        eq databaseUninstall1 = t(databaseRegistered, stdatabaseInitiated) .
        eq sensorStop1 = t(sensorProvisioned, stsensorOff) .
        eq systemDeploy13 = t(systemInitiated, stsystemConfigured) .
        eq sensorDeploy2 = t(sensorProvisioned, stsensorInstalled) .
        eq sensorPause1 = t(sensorRunning, stsensorProvisioned) .
        eq connectionsNode1 = (mysys0,systemDbservice)--(mydb0,databaseService) .
        eq systemDeploy11 = t(systemInitiated, stsystemConfigured) .
        eq databasePause = b(databasePause1) .
        eq databaseDeploy = b(databaseDeploy11,databaseDeploy12,databaseDeploy2,databaseDeploy3) .
        eq sensorPause = b(sensorPause1) .
        eq connectionsNode2 = (mysys0,systemDbservice)--(mydb0,databaseService), (listener1,listenerSysservice)--(mysys0,systemService), (sensor1,sensorRcvservice)--(listener1,listenerRcv), (sensor1,sensorConfigservice)--(listener1,listenerConfig )  .
        eq instMysys0 = { type: system, queue: nil, marking: m(systemDeployed, empty, empty) } .
       
        eq sensor = { places: sensorRunning,sensorConfigured,sensorInstalled,sensorProvisioned,sensorOff, initial: sensorOff, stationPlaces: [stsensorRunning](sensorRunning), [stsensorConfigured](sensorConfigured), [stsensorInstalled](sensorInstalled), [stsensorProvisioned](sensorProvisioned), [stsensorOff](sensorOff), transitions: (sensorDeploy11, sensorDeploy12, sensorDeploy13, sensorDeploy2, sensorDeploy3, sensorDeploy4, sensorPause1, sensorStop1), behaviors: (sensorDeploy, sensorPause, sensorStop), groupUses: g(sensorRcvservice ? (sensorRunning, sensorConfigured)), g(sensorConfigservice ? (sensorConfigured, sensorRunning, sensorInstalled)), groupProvides: empty } .
        eq listenerDeploy2 = t(listenerPaused, stlistenerConfigured) .
        eq sensorStop = b(sensorStop1) .
        eq sensorDeploy11 = t(sensorOff, stsensorProvisioned) .
        eq systemInterrupt1 = t(systemDeployed, stsystemConfigured) .
        eq system = { places: systemDeployed,systemConfigured,systemInitiated, initial: systemInitiated, stationPlaces: [stsystemDeployed](systemDeployed), [stsystemConfigured](systemConfigured), [stsystemInitiated](systemInitiated), transitions: (systemDeploy11, systemDeploy12, systemDeploy13, systemDeploy2, systemInterrupt1, systemStop1), behaviors: (systemDeploy, systemInterrupt, 
        systemStop), groupUses: g(systemDbservice ? (systemConfigured, systemDeployed)), groupProvides: g(systemService ! (systemDeployed)) } .
        eq systemInterrupt = b(systemInterrupt1) .
        eq listener = { places: listenerRunning,listenerConfigured,listenerPaused,listenerOff, initial: listenerOff, stationPlaces: [stlistenerRunning](listenerRunning), [stlistenerConfigured](listenerConfigured), [stlistenerPaused](listenerPaused), [stlistenerOff](listenerOff), transitions: (listenerDeploy1, listenerDeploy2, listenerDeploy3, listenerUpdate1, listenerDestroy1), behaviors: (listenerDeploy, listenerUpdate, listenerDestroy), groupUses: g(listenerSysservice ? (listenerConfigured, listenerRunning)), 
        groupProvides: g(listenerRcv ! (listenerRunning)), g(listenerConfig ! (listenerConfigured, listenerRunning)) } .
        eq listenerDestroy1 = t(listenerPaused, stlistenerOff) .
        eq connectionsNode3 = (sensor1,sensorRcvservice)--(listener1,listenerRcv), (sensor1,sensorConfigservice)--(listener1,listenerConfig)  .
        eq listenerDeploy3 = t(listenerConfigured, stlistenerRunning) .
        eq listenerDestroy = b(listenerDestroy1) .
        eq databaseDeploy11 = t(databaseInitiated, stdatabaseConfigured) .
        eq sensorDeploy3 = t(sensorInstalled, stsensorConfigured) .
        eq systemStop = b(systemStop1) .
        eq databaseInterrupt1 = t(databaseDeployed, stdatabaseRegistered) .
        eq instMydb0 = { type: database, queue: nil, marking: m(databaseDeployed, empty, empty) } .
        eq listenerDeploy1 = t(listenerOff, stlistenerPaused) .
        eq databaseDeploy3 = t(databaseBootstrapped, stdatabaseDeployed) .
        eq systemDeploy = b(systemDeploy11,systemDeploy12,systemDeploy13,systemDeploy2) .
        eq sensorDeploy12 = t(sensorOff, stsensorProvisioned) .
        eq sensorDeploy13 = t(sensorOff, stsensorProvisioned) .
        eq listenerUpdate1 = t(listenerRunning,stlistenerPaused) .
        eq sensorDeploy = b(sensorDeploy11,sensorDeploy12,sensorDeploy13,sensorDeploy2,sensorDeploy3,sensorDeploy4) .
        eq databaseDeploy12 = t(databaseInitiated, stdatabaseConfigured) .
        eq databaseDeploy2 = t(databaseConfigured, stdatabaseBootstrapped) .
        eq systemDeploy2 = t(systemConfigured, stsystemDeployed) .
        eq listenerUpdate = b(listenerUpdate1) .
        eq databaseInterrupt = b(databaseInterrupt1) .
        op confNode1 : ->  LocalConfiguration .
        ops msgsNode1 msgsNode2 msgsNode3 : ->  Map{Question, Bool} .
        eq msgsNode1 = empty .
        eq msgsNode2 = [ dst: mydb0 , query: isConnected((mysys0,systemDbservice)--(mydb0,databaseService)) ] |-> true , [ dst: mydb0 , query: isRefusing(databaseService) ] |-> false .
        eq msgsNode3 = [ dst: listener1 , query: isConnected((sensor1,sensorRcvservice)--(listener1,listenerRcv)) ] |-> true , [ dst: listener1 , query: isRefusing(listenerRcv) ] |-> false ,[ dst: listener1 , query: isConnected((sensor1,sensorConfigservice)--(listener1,listenerConfig)) ] |-> true , [ dst: listener1 , query: isRefusing(listenerConfig) ] |-> false .
        ops idb0 idb1 idb2 idb3 idb4 idb5 : -> Id .
        eq confNode1 = < nodeInventory: mydb0, instances: mydb0 |-> instMydb0, connections: connectionsNode1, program: nil , receivedAnswers: msgsNode1, outgoingAnswers: nil, outgoingRequests: nil, history: empty, buffer: nil > .
        op confNode2 : ->  LocalConfiguration .
        eq confNode2 = < nodeInventory: listener1, mysys0, instances: mysys0 |-> instMysys0, listener1 |-> instListener1, connections: connectionsNode2, program: 
        pushB(listener1, listenerUpdate, idb4) pushB(listener1, listenerDeploy, idb5), receivedAnswers: msgsNode2, outgoingAnswers: nil, outgoingRequests: nil, history: empty, buffer: nil > .      
        op confNode3 : ->  LocalConfiguration .
        eq confNode3 = < nodeInventory: sensor1, instances: sensor1 |-> instSensor1, connections: connectionsNode3, program: pushB(sensor1, sensorPause, idb0) wait(listener1, idb4) pushB(sensor1, sensorDeploy, idb1), receivedAnswers: msgsNode3, outgoingAnswers: nil, outgoingRequests: nil, history: empty, buffer: nil > .
        op globalsystem : -> Net .
        eq globalsystem = confNode1, confNode2, confNode3 .

endfm
