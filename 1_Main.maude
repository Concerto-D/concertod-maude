
***(
  This file contains a global description of the Maude program which formalizes Concerto-D language.
    content: 
    A - Several functional modules define mainly data types used to formalize the CONCERTO-D concepts:
    *  A functional module (described below in this file: file1_Main) which defines only a few sorts. 
        Defining these sorts first enables us to create views on them, which allows to use the views to 
        create predefined Maude structures for our sorts. 
        Example: we need to create a set on our sort Place, so we start with the following steps:
            * Declare Place in the first functional module.
            * Build a view `Place` which is mapping from the module `TRIV` to the module `DECLARATION-SORTS`.
              The `TRIV` module is a trivial module which has a single sort Elt. the view will be:
                      view Place from TRIV to DECLARATION-SORTS is
                        sort Elt to Place .
                      endv
            * we can then import pr SET{Place} which allows us to parameterize the predefined module SET{X :: TRIV} 
              by Place and thus define a set structure on Place.
    
    * Module DECLARATION-SORTS is followed by a view declarations to use (file_2: Views)
    * Basic data of Concerto-D are defined in files 3 until 8.
    * Some of the operators used for the rewriting rules are defined separately in the files 9, 10 and 11 
    B - A functional module given in 12_example_update_cps to describe a particular application which must respect the formalization of CONCERTO-D concepts 
       described in A. This module is automated by applying a Python script that we have implemented.
    
    C- A system module gives the dynamic aspect of CONCERTO-D applications through rewriting rules given in 13_Operational-semantics-Concerto-D 
    Finally, some verification results on the example of 12_example_update_cps are given in the additional file 14_Results-search. 
    )
-------------------------------------------------- Main -------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
fmod DECLARATION-SORTS is 

  sorts Place Station StationPlace  IdInstance MsgToUse Send Receive SentHistory Connection Instance LocalConfiguration .
  sorts Transition TransitionEnding Behavior BehaviorWithId GroupUse GroupProvide Instruction Request Answer ExpectedValue .

endfm

load 2_Views 
load 3_Basic-data-type-Concerto
load 4_Component
load 5_Program
load 6_Instance
load 7_Configuration
load 8_NetConcerto
load 9_Operational-semantics-functions
load 10_Collect-messages
load 11_Communication-functions
load 12_example_update_cps
load 13_Operational-semantics-Concerto-D
load 14_Results-search


