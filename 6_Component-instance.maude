fmod INSTANCE is
  
  inc COMPONENT-TYPE .
  inc BEHAVIOR .
  inc ID-COMPONENT-BEHAVIOR .
  inc MARKING . 
  inc DECLARATION-SORTS . 
  sort Instances .
  pr MAP{Id,Instance} .
  subsort Map{Id,Instance} < Instances .

  vars P1 P2 : Place . 
  var Ps : Places .
  var IdBeh : Id .
  vars Ss1 Ss2 : Stations .
  var Qb : List{PushedBehavior} .
  var M : Marking .
  var Port : Port . 
  vars Ts : Transitions .
  var Tes : TransitionEndings .
  var Ct : ComponentType .

  op { type: _, queue: _, marking: _ } : 
  ComponentType List{PushedBehavior} Marking -> Instance 
  [ctor format(n++i s s d n++i s d ni s s s----i) ] .


  op existsTransFromPlace(_,_) : Place Transitions -> Bool .  
  --- check whether there is a transition whose source place is the given place
  eq  existsTransFromPlace(P1,t(P1,Ss1),Ts) = true .
  eq  existsTransFromPlace(P1,Ts) = false  [owise].

  op areTransOfPlaceExitGroup(_,_,_) : Place Transitions Stations -> Bool .  
  --- check that for a given place and for all its transitions, the stations of its transitions are different from the stations given as parameters
  --- used later to express that places in a group necessarily leave the group according to current behavior
  eq  areTransOfPlaceExitGroup(P1,empty,Ss1) = true .
  ceq areTransOfPlaceExitGroup(P1,(t(P2,Ss1),Ts),Ss2) = areTransOfPlaceExitGroup(P1,Ts,Ss2) if ((P1 =/= P2)  or   intersection(Ss1,Ss2) == empty ) .  
  eq  areTransOfPlaceExitGroup(P1,Ts,Ss2) = false [owise] .

  op isPlaceExitGroup(_,_,_) : Place List{PushedBehavior} Stations -> Bool .  
  --- check if a place leaves a group of places according to the current behavior and with respect to the stations associated with the places of the group.
  eq isPlaceExitGroup(P1,nil,Ss1) = false . 
  ---because the behavior is nil, a place does not leave the group 
  eq isPlaceExitGroup(P1,(IdBeh ; b(Ts)) Qb,Ss1) = existsTransFromPlace(P1,Ts) and areTransOfPlaceExitGroup(P1,Ts,Ss1) . 
  --- there is transitions started from P1  and all these transitions leave the group

  op arePlacesExitGroup(_,_,_) : Places List{PushedBehavior} Stations -> Bool .  
  --- check whether for certain places and according to the current 
  --- transitions in the behavior list 
  --- the transitions of these places necessarily leave the group. 
  --- this last condition is determined on the stations associated with the places (3rd parameter).
  eq arePlacesExitGroup(empty,Qb,Ss1) = true .  
  --- empty places satisfay all transitions of empty exit group
  eq arePlacesExitGroup((P1,Ps),Qb,Ss1)  = isPlaceExitGroup(P1,Qb,Ss1) and arePlacesExitGroup(Ps,Qb,Ss1) .  

  op isActiveLocal(_,_) : Instance Port -> Bool .   
  --- checks locally if a port is active (isActive in file 3_ can be a remote call)
  ---valid when at least the places, tansitions or transition endings marking is non-empty for a given port
  eq isActiveLocal({ type: Ct, queue: Qb, marking: m(Ps,Ts,Tes) }, 
                   Port) = 
  notEmptyMarking(
    intersectionMarkings((Ct).getMarkingOfGroup((Ct).getPlacesOfPort(Port)), 
                         m(Ps,Ts,Tes))) .

  op isRefusingLocal(_,_) : Instance Port -> Bool .  
  ***( checks locally if a new use connection is refused (isRefusing in file 3_ 
    can correspond to this local call or a remote call).
    A port is refused when only places are marked, and all marked places are 
    ready to leave the group of places of the port according to the current 
    behavior. )
  ceq isRefusingLocal({ type: Ct, queue: Qb, marking: m(Ps,Ts,Tes) },    
                      Port) = true if  
  (arePlacesExitGroup(
    placesOfMarking(
      intersectionMarkings((Ct).getMarkingOfGroup((Ct).getPlacesOfPort(Port)),
                           m(Ps,Ts,Tes))),
    Qb,
    getStationsfromGroup((Ct).getPlacesOfPort(Port),(Ct).stationPlaces)) 
  and
  transitionsOfMarking(
    intersectionMarkings((Ct).getMarkingOfGroup((Ct).getPlacesOfPort(Port)), 
                         m(Ps,Ts,Tes))) == empty 
  and 
  transitionEndingsOfMarking(
    intersectionMarkings((Ct).getMarkingOfGroup((Ct).getPlacesOfPort(Port)), 
                         m(Ps,Ts,Tes))) == empty 
   )  .
  eq isRefusingLocal({ type: Ct, queue: Qb, marking: m(Ps,Ts,Tes) },
                     Port) = false [owise] .

  --- Helene ??? ça me semble bien compliqué
  op activeMarking(_,_,_) : Instance Port Marking -> Bool . 
  --- active depending a marking
  eq activeMarking({ type: Ct, queue: Qb, marking: m(Ps,Ts,Tes) },
                    Port, M) = 
  notEmptyMarking(
    intersectionMarkings((Ct).getMarkingOfGroup((Ct).getPlacesOfPort(Port)),
                         M)) .

endfm

