mod EXAMPLE is 
  inc OPERATIONAL-SEMANTICS .
  inc LISTENER-SENSOR-EXAMPLE . 
endm 

--- Search for a state of the set of nodes where the programs 
--- have been fully executed. We look for a maximum of 5 different 
--- states, which are normal forms (=>! arrow). 

search [5] globalsystem =>!
< nodeInventory: sensor1, 
  instances: (sensor1 |-> { type: sensortype:ComponentType, 
                            queue: nil:List{PushedBehavior}, 
                            marking: m(sensorRunning, empty, empty) }),
  connections: connectNode3:Connections, 
  program: nil:Program, 
  externState: externStateNode3:Map{Question,Bool}, 
  outgoingAnswers: OutAns3:List{Question}, 
  outgoingQuestions: OutReq3:List{Question}, 
  history: hist3:Set{Question},
  incomingMsgs: Buf3:List{Message} >,
< nodeInventory: listener1,idInst:Ids,
  instances: (listener1 |-> { type: listenertype:ComponentType, 
                              queue: nil:List{PushedBehavior}, 
                              marking: m(listenerRunning,empty,empty) }), Is:Instances,
  connections: connectNode2:Connections,
  program: nil:Program,
  externState: externStateNode2:Map{Question,Bool}, 
  outgoingAnswers: OutAns2:List{Question}, 
  outgoingQuestions: OutReq2:List{Question}, 
  history: hist2:Set{Question},
  incomingMsgs: Buf2:List{Message} >, s:System .

--- This displays the sequence of rules applied to reach 
--- the final state found by the previous search command. 
show path 11144 .

--- We have the following property: a sensor can only begin its start behavior 
--- at the end of the update behavior of the listener. 
--- Formally, we will never find a solution that models the case where the 
--- sensor queue contains transitions related to the `start' behavior 
--- such that the `update' behavior of listener may be in its behavoirs queue 
--- or not yet pushed into this queue.

---     The Maude search command is: 
search [1]  globalsystem =>*  
< nodeInventory: sensor1, 
  instances: (sensor1 |-> { type: sensortype:ComponentType, 
                            queue: (idb1 ; 
                                    b(t(sensorConfigured,stsensorRunning), 
                                      t(sensorInstalled,stsensorConfigured), 
                                      t(sensorProvisioned,stsensorInstalled), 
                                      t(sensorOff,stsensorProvisioned)))
                                    qsensor:List{PushedBehavior}, 
                            marking: marksensor1:Marking }) , 
  connections: connectNode3:Connections, 
  program: progNode3:Program, 
  externState: externStateNode3:Map{Question,Bool}, 
  outgoingAnswers: OutAns3:List{Question}, 
  outgoingQuestions: OutReq3:List{Question}, 
  history: hist3:Set{Question},
  incomingMsgs: Buf3:List{Message} >, 
< nodeInventory: listener1, idInst:Ids,
  instances: (listener1 |-> { type: listenertype:ComponentType, 
                              queue: qblistener1:List{PushedBehavior}, 
                              marking: marklistener1:Marking }), Is:Instances,
  connections: connectNode2:Connections,
  program: progNode2:Program,
  externState: externStateNode2:Map{Question, Bool}, 
  outgoingAnswers: OutAns2:List{Question}, 
  outgoingQuestions: OutReq2:List{Question},  
  history: hist2:Set{Question},
  incomingMsgs: Buf2:List{Message} >, s:System 
 such that 
   (isBehaviorinList(idb4,qblistener1:List{PushedBehavior}) 
   or not (isCompletedLocal(listener1,idb4,progNode2:Program))) .