---    Verification of system
---    Example: 2 clients and one server
---    each component is on a separate site
---    each component contains 3 states with a single transition between two states.
---    the last state is a use port for the client, while the last state is a provide port for the server.

mod Concerto-PREDS is 
--- define system and the propositions of system used in verification

  protecting OPERATIONAL-SEMANTICS . 
  including SATISFACTION .
  subsort Net < State .
  ops DBDeploy SysDeployed RunSensor RunListener :  -> Prop .  --- propositions of verification

  var Q : Prop .

  var gconfig : Net .

  var Rx : Program .
  var Ix  : Instances . 
  var Lx  : Connections .
  var Fx  : ExternalFunctions .
  var QSx  : Qsend .
  var QRx  : Qrec .
  var Wx  : Ws .
  var ct : ComponentType .
  vars qb : QBehavoirId .
  var ps : Places .
  var ts : Transitionns .
  var tes  : TransitionnEndings .
  var  IdsNodx : IdentCs .

  ------------------part concerned by the automatic generation 'Python'---------------------------
	ops confProgDatabase confProgSystem confProgSensor0 : ->  LocalConfiguration .
	op test : -> Net .
	op database : -> ComponentType .
	ops databaseInitiated databaseConfigured databaseBootstrapped databaseDeployed databaseRegistered : -> Place .
	ops stDatabaseInitiated stDatabaseConfigured stDatabaseBootstrapped stDatabaseDeployed stDatabaseRegistered : -> Station .
	op databaseInitiated : -> InitPlace .
	ops databaseService : -> ProPort .
	
	ops databaseDeploy11 databaseDeploy12 databaseDeploy2 databaseDeploy3 databaseInterrupt1 databasePause1 databaseUpdate databaseUninstall1 : -> Transitionn .
	eq databaseDeploy11 = t(databaseInitiated, stDatabaseConfigured) .
	eq databaseDeploy12 = t(databaseInitiated, stDatabaseConfigured) .
	eq databaseDeploy2 = t(databaseConfigured, stDatabaseBootstrapped) .
	eq databaseDeploy3 = t(databaseBootstrapped, stDatabaseDeployed) .
	eq databaseInterrupt1 = t(databaseDeployed, stDatabaseRegistered) .
	eq databasePause1 = t(databaseRegistered, stDatabaseBootstrapped) .
	eq databaseUpdate = t(databaseRegistered, stDatabaseConfigured) .
	eq databaseUninstall1 = t(databaseRegistered, stDatabaseInitiated) .
	ops databaseDeploy databaseInterrupt databasePause databaseUpdate databaseUninstall : -> Behavior .
	eq databaseDeploy = b(databaseDeploy11,databaseDeploy12,databaseDeploy2,databaseDeploy3) .
	eq databaseInterrupt = b(databaseInterrupt1) .
	eq databasePause = b(databasePause1) .
	eq databaseUpdate = b(databaseUpdate) .
	eq databaseUninstall = b(databaseUninstall1) .
	eq database = < (databaseInitiated,databaseConfigured,databaseBootstrapped,databaseDeployed,databaseRegistered), databaseInitiated, stDatabaseInitiated ; databaseInitiated, stDatabaseConfigured ; databaseConfigured, stDatabaseBootstrapped ; databaseBootstrapped, stDatabaseDeployed ; databaseDeployed, stDatabaseRegistered ; databaseRegistered, (databaseDeploy11, databaseDeploy12, databaseDeploy2, databaseDeploy3, databaseInterrupt1, databasePause1, databaseUpdate, databaseUninstall1), (databaseDeploy, databaseInterrupt, databasePause, databaseUpdate, databaseUninstall), empty, databaseService ? (databaseDeployed) > .
	op listener : -> ComponentType .
	ops listenerRunning listenerConfigured listenerPaused listenerOff : -> Place .
	ops stListenerRunning stListenerConfigured stListenerPaused stListenerOff : -> Station .
	op listenerOff : -> InitPlace .
	ops listenerRcv listenerConfig : -> ProPort .
	ops listenerSysService : -> UsePort .
	ops listenerDeploy1 listenerDeploy2 listenerDeploy3 listenerUpdate1 listenerDestroy1 : -> Transitionn .
	eq listenerDeploy1 = t(listenerOff, stListenerPaused) .
	eq listenerDeploy2 = t(listenerPaused, stListenerConfigured) .
	eq listenerDeploy3 = t(listenerConfigured, stListenerRunning) .
	eq listenerUpdate1 = t(listenerRunning, stListenerPaused) .
	eq listenerDestroy1 = t(listenerPaused, stListenerOff) .
	ops listenerDeploy listenerUpdate listenerDestroy : -> Behavior .
	eq listenerDeploy = b(listenerDeploy1,listenerDeploy2,listenerDeploy3) .
	eq listenerUpdate = b(listenerUpdate1) .
	eq listenerDestroy = b(listenerDestroy1) .
	eq listener = < (listenerRunning,listenerConfigured,listenerPaused,listenerOff), listenerOff, stListenerRunning ; listenerRunning, stListenerConfigured ; listenerConfigured, stListenerPaused ; listenerPaused, stListenerOff ; listenerOff, (listenerDeploy1, listenerDeploy2, listenerDeploy3, listenerUpdate1, listenerDestroy1), (listenerDeploy, listenerUpdate, listenerDestroy), listenerSysService ! (listenerRunning, listenerConfigured), listenerRcv ? (listenerRunning), listenerConfig ? (listenerRunning, listenerConfigured) > .
	op sensor : -> ComponentType .
	ops sensorRunning sensorConfigured sensorInstalled sensorProvisioned sensorOff : -> Place .
	ops stSensorRunning stSensorConfigured stSensorInstalled stSensorProvisioned stSensorOff : -> Station .
	op sensorOff : -> InitPlace .
	
	ops sensorRcvService sensorConfigService : -> UsePort .
	ops sensorDeploy11 sensorDeploy12 sensorDeploy13 sensorDeploy2 sensorDeploy3 sensorDeploy4 sensorPause1 sensorStop1 : -> Transitionn .
	eq sensorDeploy11 = t(sensorOff, stSensorProvisioned) .
	eq sensorDeploy12 = t(sensorOff, stSensorProvisioned) .
	eq sensorDeploy13 = t(sensorOff, stSensorProvisioned) .
	eq sensorDeploy2 = t(sensorProvisioned, stSensorInstalled) .
	eq sensorDeploy3 = t(sensorInstalled, stSensorConfigured) .
	eq sensorDeploy4 = t(sensorConfigured, stSensorRunning) .
	eq sensorPause1 = t(sensorRunning, stSensorProvisioned) .
	eq sensorStop1 = t(sensorProvisioned, stSensorOff) .
	ops sensorDeploy sensorPause sensorStop : -> Behavior .
	eq sensorDeploy = b(sensorDeploy11,sensorDeploy12,sensorDeploy13,sensorDeploy2,sensorDeploy3,sensorDeploy4) .
	eq sensorPause = b(sensorPause1) .
	eq sensorStop = b(sensorStop1) .
	eq sensor = < (sensorRunning,sensorConfigured,sensorInstalled,sensorProvisioned,sensorOff), sensorOff, stSensorRunning ; sensorRunning, stSensorConfigured ; sensorConfigured, stSensorInstalled ; sensorInstalled, stSensorProvisioned ; sensorProvisioned, stSensorOff ; sensorOff, (sensorDeploy11, sensorDeploy12, sensorDeploy13, sensorDeploy2, sensorDeploy3, sensorDeploy4, sensorPause1, sensorStop1), (sensorDeploy, sensorPause, sensorStop), sensorRcvService ! (sensorRunning, sensorConfigured), sensorConfigService ! (sensorConfigured, sensorRunning, sensorInstalled), empty > .
	op system : -> ComponentType .
	ops systemDeployed systemConfigured systemInitiated : -> Place .
	ops stSystemDeployed stSystemConfigured stSystemInitiated : -> Station .
	op systemInitiated : -> InitPlace .
	ops systemService : -> ProPort .
	ops systemDbService : -> UsePort .
	ops systemDeploy11 systemDeploy12 systemDeploy13 systemDeploy2 systemInterrupt1 systemStop1 : -> Transitionn .
	eq systemDeploy11 = t(systemInitiated, stSystemConfigured) .
	eq systemDeploy12 = t(systemInitiated, stSystemConfigured) .
	eq systemDeploy13 = t(systemInitiated, stSystemConfigured) .
	eq systemDeploy2 = t(systemConfigured, stSystemDeployed) .
	eq systemInterrupt1 = t(systemDeployed, stSystemConfigured) .
	eq systemStop1 = t(systemDeployed, stSystemInitiated) .
	ops systemDeploy systemInterrupt systemStop : -> Behavior .
	eq systemDeploy = b(systemDeploy11,systemDeploy12,systemDeploy13,systemDeploy2) .
	eq systemInterrupt = b(systemInterrupt1) .
	eq systemStop = b(systemStop1) .
	eq system = < (systemDeployed,systemConfigured,systemInitiated), systemInitiated, stSystemDeployed ; systemDeployed, stSystemConfigured ; systemConfigured, stSystemInitiated ; systemInitiated, (systemDeploy11, systemDeploy12, systemDeploy13, systemDeploy2, systemInterrupt1, systemStop1), (systemDeploy, systemInterrupt, systemStop), systemDbService ! (systemDeployed, systemConfigured), systemService ? (systemDeployed) > .
	ops db1 : -> IdentB .
	ops mydb0 : -> IdentC .
	eq confProgDatabase = <(mydb0), (empty, empty), add(mydb0,database) . con(mysys0,systemDbService,mydb0,databaseService) . pushB(mydb0, databaseDeploy, db1) . [], empty, nil, nil, empty > .
	ops sys1 0lst1 : -> IdentB .
	ops mysys0 listener0 : -> IdentC .
	eq confProgSystem = <(mysys0, listener0), (empty, empty), add(mysys0,system) . con(mysys0,systemDbService,mydb0,databaseService) . add(listener0,listener) . con(listener0,listenerSysService,mysys0,systemService) . con(sensor0,sensorRcvService,listener0,listenerRcv) . con(sensor0,sensorConfigService,listener0,listenerConfig) . pushB(mysys0, systemDeploy, sys1) . pushB(listener0, listenerDeploy, 0lst1) . [], empty, nil, nil, empty > .
	ops 0sens1 : -> IdentB .
	ops sensor0 : -> IdentC .
	eq confProgSensor0 = <(sensor0), (empty, empty), add(sensor0,sensor) . con(sensor0,sensorRcvService,listener0,listenerRcv) . con(sensor0,sensorConfigService,listener0,listenerConfig) . pushB(sensor0, sensorDeploy, 0sens1) . [], empty, nil, nil, empty > .
	eq test = confProgDatabase ; confProgSystem ; confProgSensor0 .
-------------------------------------------- End part generation--------------------------------
--------------------------------- When are the verification propositions true? -----

eq (< IdsNodx,(< mysys0,ct,qb,m(systemDeployed, ps,ts,tes) > , Ix,Lx),Rx,Fx, QRx,  QSx, Wx > ; gconfig)  |= SysDeployed = true .
eq (< IdsNodx,(< listener0,ct,qb,m(listenerRunning, ps,ts,tes) > , Ix,Lx),Rx,Fx, QRx,  QSx, Wx > ; gconfig)  |= RunListener = true .
eq (< IdsNodx,(< sensor0,ct,qb,m(sensorRunning, ps,ts,tes) > , Ix,Lx),Rx,Fx, QRx,  QSx, Wx > ; gconfig)  |= RunSensor = true .
eq (< IdsNodx,(< mydb0,ct,qb,m(databaseDeployed, ps,ts,tes) > , Ix,Lx),Rx,Fx, QRx,  QSx, Wx > ; gconfig)  |= DBDeploy = true .
eq gconfig  |= Q = false [owise] .

endm

mod Concerto-CHECK is 
  --- import model checker of Maude
  protecting Concerto-PREDS . 
  including MODEL-CHECKER . 
  including LTL-SIMPLIFIER . 

endm

  ------------------------------------Examples of verification over test -------------------------------------------------------

---  red modelCheck(test, [] (RunListener -> SysDeployed )) .


---  red modelCheck(test, [] ( (DeployC1 \/ DeployC2)  -> DeployS )) .
---  red modelCheck(test, [] ( DeployS -> ( (<> ( DeployC2 ) )))) .
---  red modelCheck(test, [] ( DeployS -> ( (<> ( DeployC2 ) /\ <> ( DeployC1 ) )))) .
---  red modelCheck(test, [] ( DeployS -> ( (<> ( DeployC2 ) )))) .
---  red modelCheck(test, [] ~ DeployC1  ) .
---  red modelCheck(test, [] ( DeployS -> ( <> ( DeployC2 ) /\  <> ( DeployC1 ) ))) .

***(
  op p1 : -> InitPlace .
  op q1 : -> InitPlace .
  ops p2 p3 : -> Place .
  ops q2 q3 : -> Place .
 
  ops s1 s2 s3   : -> Station .
  ops t1 t2 t3  : -> Station .

  ops idb1 idb2 idb3  : -> IdentB .
  ops idc1 idc2 idc3  : -> IdentC .

  ops us1 : -> UsePort .
  op pr1 : -> ProPort .

  ops c1 c2  : -> ComponentType .
  ops confx confy confz : -> LocalConfiguration .
  op test : -> Net .

  eq c1 =  < (p1, p2, p3) , p1 , (s1 ; p1, s2 ; p2 , s3 ; p3), (t(p1, s2), t(p2, s3) ), (b(t(p1, s2),t(p2, s3))) , (us1 ! (p3)) , empty     > .
  eq c2 =  < (q1, q2 , q3) , q1 , (t1 ; q1, t2 ; q2 , t3 ; q3), (t(q1, t2), t(q2, t3)  ), (b(t(q1, t2),t(q2, t3))) , empty , (pr1 ? (q3))   > .

  eq confx = < (idc1),(empty, empty) , add(idc1,c1)   . con(idc1,us1,idc3,pr1) . pushB(idc1,b(t(p1, s2),t(p2, s3)),idb1) .  [] , empty , nil , nil  , empty >  .
  eq confy = < (idc2),(empty, empty) , add(idc2,c1)  . con(idc2,us1,idc3,pr1) .  pushB(idc2,b(t(p1, s2),t(p2, s3)),idb2) . [] , empty , nil , nil  , empty >  .
  eq confz = < (idc3),(empty, empty) , add(idc3,c2)  .  con(idc1,us1,idc3,pr1) . con(idc2,us1,idc3,pr1) . pushB(idc3,b(t(q1, t2),t(q2, t3)),idb3) . [] , empty , nil , nil , empty >  .
 
  eq test =  confx ; confy ; confz  .


)