---    Verification of system
---    Example: 2 clients and one server
---    each component is on a separate site
---    each component contains 3 states with a single transition between two states.
---    the last state is a use port for the client, while the last state is a provide port for the server.

mod Concerto-PREDS is 
--- define system and the propositions of system used in verification

  protecting OPERATIONAL-SEMANTICS . 
  including SATISFACTION .
  subsort Net < State .
  ops DeployC1 DeployS DeployC2 :  -> Prop .  --- propositions of verification

  var Q : Prop .

  var gconfig : Net .

  var Rx : Program .
  var Ix  : Instances . 
  var Lx  : Connections .
  var Fx  : ExternalFunctions .
  var QSx  : Qsend .
  var QRx  : Qrec .
  var Wx  : Ws .
  var ct : ComponentType .
  vars qb : QBehavoirId .
  var ps : Places .
  var ts : Transitionns .
  var tes  : TransitionnEndings .
  var  IdsNodx : IdentCs .

  op p1 : -> InitPlace .
  op q1 : -> InitPlace .
  ops p2 p3 : -> Place .
  ops q2 q3 : -> Place .
 
  ops s1 s2 s3   : -> Station .
  ops t1 t2 t3  : -> Station .

  ops idb1 idb2 idb3  : -> IdentB .
  ops idc1 idc2 idc3  : -> IdentC .

  ops us1 : -> UsePort .
  ops pr1 : -> ProPort .

  ops c1 c2  : -> ComponentType .
  ops confx confy confz : -> LocalConfiguration .
  ops test : -> Net .

  eq c1 =  < (p1, p2, p3) , p1 , (s1 ; p1, s2 ; p2 , s3 ; p3), (t(p1, s2), t(p2, s3) ), (b(t(p1, s2),t(p2, s3))) , (us1 ! (p3)) , empty     > .
  eq c2 =  < (q1, q2 , q3) , q1 , (t1 ; q1, t2 ; q2 , t3 ; q3), (t(q1, t2), t(q2, t3)  ), (b(t(q1, t2),t(q2, t3))) , empty , (pr1 ? (q3))   > .

  eq confx = < (idc1),(empty, empty) , add(idc1,c1)   . con(idc1,us1,idc3,pr1) . pushB(idc1,b(t(p1, s2),t(p2, s3)),idb1) .  [] , empty , nil , nil  , empty >  .
  eq confy = < (idc2),(empty, empty) , add(idc2,c1)  . con(idc2,us1,idc3,pr1) .  pushB(idc2,b(t(p1, s2),t(p2, s3)),idb2) . [] , empty , nil , nil  , empty >  .
  eq confz = < (idc3),(empty, empty) , add(idc3,c2)  .  con(idc1,us1,idc3,pr1) . con(idc2,us1,idc3,pr1) . pushB(idc3,b(t(q1, t2),t(q2, t3)),idb3) . [] , empty , nil , nil , empty >  .
 
  eq test =  confx ; confy ; confz  .

--------------------------------- When are the verification propositions true? -----
  eq (< IdsNodx,(< idc1,ct,qb,m(p3, ps,ts,tes) > , Ix,Lx),Rx,Fx, QRx,  QSx, Wx > ; gconfig)  |= DeployC1 = true .
  --- So Deploy Client 1 is true when instance of idc1 must in place p3
  eq (< IdsNodx,(< idc2,ct,qb,m(p3, ps,ts,tes) > , Ix,Lx),Rx,Fx, QRx,  QSx, Wx > ; gconfig)  |= DeployC2 = true .
  eq (< IdsNodx,(< idc3,ct,qb,m(q3, ps,ts,tes) > , Ix,Lx),Rx,Fx, QRx,  QSx, Wx > ; gconfig)  |= DeployS = true .

  eq gconfig  |= Q = false [owise] .

endm

mod Concerto-CHECK is 
  --- import model checker of Maude
  protecting Concerto-PREDS . 
  including MODEL-CHECKER . 
  including LTL-SIMPLIFIER . 

endm

  ------------------------------------Examples of verification over test -------------------------------------------------------

---  red modelCheck(test, [] ( (DeployC1 \/ DeployC2)  -> DeployS )) .
---  red modelCheck(test, [] ( DeployS -> ( (<> ( DeployC2 ) )))) .
---  red modelCheck(test, [] ( DeployS -> ( (<> ( DeployC2 ) /\ <> ( DeployC1 ) )))) .
---  red modelCheck(test, [] ( DeployS -> ( (<> ( DeployC2 ) )))) .
---  red modelCheck(test, [] ~ DeployC1  ) .
---  red modelCheck(test, [] ( DeployS -> ( <> ( DeployC2 ) /\  <> ( DeployC1 ) ))) .

