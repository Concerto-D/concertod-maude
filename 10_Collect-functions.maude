

fmod COLLECT-EXTERNAL-FUNCTIONS-FIRING is

  inc CONCERTO-D-CONFIGURATION .

  var IdIx : IdentInstances . 
  var Ix : Instances .
  var L : Connections .
  var val : BoolWithBot .
  var use : UsePort .
  var pro : ProvidePort .
  vars  id1 id2 : IdentInstance .
  var newMark : Marking .
  var Mx : MsgToUses .
  var Hx : SentHistorys .
  var QSx : Qsend .

      

  op CollectFunctionFiring(_,_,_,_,_,_,_) : IdentInstances Marking Instances Connections MsgToUses SentHistorys Qsend -> Qsend .
  --- used to determine the information of external functions that allow to apply the rule firing transition. 
  --- it aims to build a list of external ExprActive functions for use ports whose current value does not allow the rule to be applied; in other words,
  --- its evaluation = true or bot knowing that the provide port linked to this use port wants to change the status of its provide port from active to inactive.
  --- in this case, we add the function ExprActive of this use port to the list of external information, on condition that the request for this function is not currently being processed.
  --- this last condition is verified if ExprActive doesn't belong to either SentHistorys or Qsend, therefore this function also takes these two parameters into account
  eq CollectFunctionFiring(IdIx,newMark,Ix,empty,Mx,Hx,QSx) = nil .
  ceq CollectFunctionFiring(IdIx,newMark,Ix,(id1,use,id2,pro),L,Mx,Hx,QSx) = 
  append(ExprActive(id1,use),CollectFunctionFiring(IdIx,newMark,Ix,L,Mx,Hx,QSx))
  if
  (   
  (not ExprActive(id1,use) in Hx) and 
  (not (occurs(ExprActive(id1,use),QSx)))  and
  (not (id1 in IdIx)) and
  ( Evaluation(IdIx,ExprActive(id1,use),Mx,empty,empty,nil )   == true  or Evaluation(IdIx,ExprActive(id1,use),Mx,empty,empty,nil )  == bot ) and
  ( (LocalEvaluation(ExprActive(id2,pro),Ix,empty,nil ) == true) and (activeMarking(InstanceOfIdent(Ix,id2),pro,newMark) == false ))  
  ) .
  eq CollectFunctionFiring(IdIx,newMark,Ix,(id1,use,id2,pro),L,Mx,Hx,QSx) = CollectFunctionFiring(IdIx,newMark,Ix,L,Mx,Hx,QSx) [owise] .

endfm


fmod COLLECT-EXTERNAL-FUNCTIONS-ENTERING-PLACE is

  inc CONCERTO-D-CONFIGURATION .

  var p : Place .
  var ps : Places .
  var GUx :  GroupUses .
  vars i i' : Instance .
  var Ix : Instances .
  var L : Connections .
  var Mx : MsgToUses .
  vars use1 use : UsePort .
  var pro : ProvidePort .
  vars IdentIns id1 id2 : IdentInstance .
  var Hx : SentHistorys .
  var QSx : Qsend .  
  var IdIx : IdentInstances .   

  op CollectFunctionsEnteringPlace(_,_,_,_,_,_,_,_,_,_) : IdentInstances Place GroupUses Instance Instance Instances Connections MsgToUses SentHistorys Qsend -> Qsend .
  --- we follow the same reasoning used to collect external functions for firing
  eq CollectFunctionsEnteringPlace(IdIx,p,empty,i,i',Ix,L,Mx,Hx,QSx) = nil .
  ceq CollectFunctionsEnteringPlace(IdIx,p,(use ! ps),GUx,i,i',Ix,L,Mx,Hx,QSx) = 
  append(CollectConnected(IdIx,use,IdentOfInstance(i),L,Mx,Hx,QSx),append(CollectAllowed(IdIx,use,IdentOfInstance(i),i,Ix,L,Mx,Hx,QSx), CollectFunctionsEnteringPlace(IdIx,p,GUx,i,i',Ix,L,Mx,Hx,QSx))) 
  if  ((p in ps) and active(i,use) == false and active(i',use) == true  ).   
  eq CollectFunctionsEnteringPlace(IdIx,p,(use ! ps),GUx,i,i',Ix,L,Mx,Hx,QSx) = CollectFunctionsEnteringPlace(IdIx,p,GUx,i,i',Ix,L,Mx,Hx,QSx) [owise] .

  op CollectConnected(_,_,_,_,_,_,_) : IdentInstances UsePort IdentInstance Connections MsgToUses SentHistorys Qsend -> Qsend . 
  eq CollectConnected(IdIx,use,id1,empty,Mx,Hx,QSx) = nil .
  ceq CollectConnected(IdIx,use,id1,(id1,use,id2,pro),L,Mx,Hx,QSx) = ExprIsConnected(id2,(id1,use,id2,pro))
  if(
    (not (ExprIsConnected(id2,(id1,use,id2,pro)) in Hx)) and 
    (not (occurs(ExprIsConnected(id2,(id1,use,id2,pro)),QSx)))  and
    (not (id2 in IdIx)) and
    ( Evaluation(IdIx,ExprIsConnected(id2,(id1,use,id2,pro)),Mx,empty,empty,nil )   == false  or Evaluation(IdIx,ExprIsConnected(id2,(id1,use,id2,pro)),Mx,empty,empty,nil )   == bot )
    ) .
  eq CollectConnected(IdIx,use1,IdentIns,(id1,use,id2,pro),L,Mx,Hx,QSx) = CollectConnected(IdIx,use1,IdentIns,L,Mx,Hx,QSx) [owise] .


  op CollectAllowed(_,_,_,_,_,_,_,_) : IdentInstances UsePort  IdentInstance Instances Connections MsgToUses SentHistorys Qsend -> Qsend . 
  eq CollectAllowed(IdIx,use,id1,Ix,empty,Mx,Hx,QSx) = nil .
  ceq CollectAllowed(IdIx,use,id1,Ix,(id1,use,id2,pro),L,Mx,Hx,QSx) = ExprRefusing(id2,pro)
  if (
      (not ExprRefusing(id2,pro) in Hx) and 
      (not (occurs(ExprRefusing(id2,pro),QSx)))  and
      (not (id2 in IdIx)) and  
      ( Evaluation(IdIx,ExprRefusing(id2,pro),Mx,empty,empty,nil )   == true  or Evaluation(IdIx,ExprRefusing(id2,pro),Mx,empty,empty,nil)   == bot )   
    ) .
  eq CollectAllowed(IdIx,use1,IdentIns,Ix,(id1,use,id2,pro),L,Mx,Hx,QSx) = CollectAllowed(IdIx,use1,IdentIns,Ix,L,Mx,Hx,QSx) [owise] .

endfm

fmod COLLECT-EXTERNAL-FUNCTIONS-WAIT is

  inc CONCERTO-D-CONFIGURATION .

  var val : BoolWithBot .
  var id1 : IdentInstance .
  var idbeh : IdentBehavior .
  var Mx : MsgToUses .
  var Hx : SentHistorys .
  var QSx : Qsend .
  var m : Msg .
  var IdIx : IdentInstances .   

  op CollectFunctionWait(_,_,_,_,_,_) : IdentInstances IdentInstance IdentBehavior MsgToUses SentHistorys Qsend -> Qsend .
  ceq CollectFunctionWait(IdIx,id1,idbeh,Mx,Hx,QSx) = nil if (id1 in IdIx) .
  ceq CollectFunctionWait(IdIx,id1,idbeh,extern(m ; val),Mx,Hx,QSx) =  CollectFunctionWait(IdIx,id1,idbeh,Mx,Hx,QSx) 
  if ((m =/= ExprCompleted(id1,idbeh))  and (not (id1 in IdIx)) ) .
  eq CollectFunctionWait(IdIx,id1,idbeh,extern(ExprCompleted(id1,idbeh) ; val),Mx,Hx,QSx) = 
  if (( val == true ) or (ExprCompleted(id1,idbeh) in Hx) or (ExprCompleted(id1,idbeh) in QSx) )  then nil else ExprCompleted(id1,idbeh) fi .
  eq CollectFunctionWait(IdIx,id1,idbeh,empty,Hx,QSx) = ExprCompleted(id1,idbeh) . 

endfm

fmod COLLECT-EXTERNAL-FUNCTIONS-DISCONNECT is

  inc CONCERTO-D-CONFIGURATION .

  var val : BoolWithBot .
  var use : UsePort .
  var pro : ProvidePort .
  vars  id1 id2 : IdentInstance .
  var Mx : MsgToUses .
  var Hx : SentHistorys .
  var QSx : Qsend .
  var m : Msg .
  var IdIx : IdentInstances . 
  var L : Connection .  

  op CollectFunctionsDiscon(_,_,_,_,_) : IdentInstances Connection MsgToUses SentHistorys Qsend -> Qsend .
  ceq CollectFunctionsDiscon(IdIx,(id1,use,id2,pro),Mx,Hx,QSx) = append(ActiveCollect(id1,use,Mx,Hx,QSx),(DisconCollect(id1,(id1,use,id2,pro),Mx,Hx,QSx))) 
  if (not (id1 in IdIx) ) .
  ceq CollectFunctionsDiscon(IdIx,(id1,use,id2,pro),Mx,Hx,QSx) = DisconCollect(id2,(id1,use,id2,pro),Mx,Hx,QSx) 
  if (not (id2 in IdIx) ) .
  eq CollectFunctionsDiscon(IdIx,(id1,use,id2,pro),Mx,Hx,QSx) = nil [owise] .

  op ActiveCollect(_,_,_,_,_) : IdentInstance UsePort MsgToUses SentHistorys Qsend -> Qsend .
  ceq ActiveCollect(id1,use,extern(m ; val),Mx,Hx,QSx) =  ActiveCollect(id1,use,Mx,Hx,QSx) if (m =/= ExprActive(id1,use)) .
  eq ActiveCollect(id1,use,extern(ExprActive(id1,use) ; val),Mx,Hx,QSx) = 
  if 
  (( val == false ) or (ExprActive(id1,use) in Hx) or (ExprActive(id1,use) in QSx) ) then nil else ExprActive(id1,use) fi .
  eq ActiveCollect(id1,use,empty,Hx,QSx) = ExprActive(id1,use) . 

  op DisconCollect(_,_,_,_,_) : IdentInstance Connection MsgToUses SentHistorys Qsend -> Qsend .

  ceq DisconCollect(id1,L,extern(m ; val),Mx,Hx,QSx) =  DisconCollect(id1,L,Mx,Hx,QSx) if (m =/= ExprDisconnect(id1,L)) .
  eq DisconCollect(id1,L,extern(ExprDisconnect(id1,L) ; val),Mx,Hx,QSx) = 
  if 
  (( val == true ) or (ExprDisconnect(id1,L) in Hx) or (ExprDisconnect(id1,L) in QSx) ) then nil else ExprDisconnect(id1,L) fi .
  eq DisconCollect(id1,L,empty,Hx,QSx) = ExprDisconnect(id1,L) . 

endfm



