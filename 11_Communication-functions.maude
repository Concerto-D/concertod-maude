
fmod COMMUNICATION-MESSAGES is

    inc CONCERTO-D-CONFIGURATION .

    var IdIx : IdentInstances . 
    var L : Connections .
    var Mx : MsgToUses .
    var val : BoolWithBot .

    var use : UsePort .
    var pro : ProvidePort .
    var m : Msg .
    vars id1 id2 : IdentInstance .

   op IdentInstanceonnectionWhenSendActive(_,_,_) : Connections Msg BoolWithBot -> IdentInstances .
   --- Since the update when sending an evaluation of a local function only concerns 
   --- the case of the refusing function if the sender sends an evlaution (false) for its active function'ExprActive(id1,u)'. 
   --- The objective of this function is to determine the ident id2 of instacne of the remote site in relation with the local instance identified by id1, 
   --- which claims the active function with a false evlaution. 
   --- Note that the expected result of this function is id2 if it exists, otherwise empty, 
   --- so the result of the function is a set that can contain either an empty element or a single identifier.
 
    eq IdentInstanceonnectionWhenSendActive(((id1,use,id2,pro),L),ExprActive(id1,use),false) = id2 . 
    eq IdentInstanceonnectionWhenSendActive(empty,m,val) = empty . 
    eq IdentInstanceonnectionWhenSendActive(((id1,use,id2,pro),L),m,val) = IdentInstanceonnectionWhenSendActive(L,m,val) [owise] . 

    op  UpDateMsgToUsesSend(_,_) : MsgToUses IdentInstances -> MsgToUses .  
    --- The update is related only to the refusing function who we know its identifier if exist.
    eq  UpDateMsgToUsesSend(Mx,empty) = Mx .
    eq  UpDateMsgToUsesSend(empty,IdIx) = empty .
    ceq UpDateMsgToUsesSend((extern(ExprRefusing(id1,pro) ; val),Mx),IdIx) = extern(ExprRefusing(id1,pro) ; bot), Mx if (id1 in IdIx ) .
    eq  UpDateMsgToUsesSend((extern(m ; val),Mx),IdIx) = extern(m ; val), UpDateMsgToUsesSend(Mx,IdIx) [owise] .
    
endfm

