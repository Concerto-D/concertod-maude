--- Auxiliary Operations for the Operational Semantics --- 
--- Operations related to communications ---

fmod UPDATE-COMMUNICATION-MESSAGES is

    inc CONCERTO-D-CONFIGURATION .

    var Ids : Ids . 
    var Cs : Connections .
    var eState : Map{Question,Bool} .
    var Val : Bool .
    var Use : UsePort .
    var Pro : ProvidePort .
    var Q1 : Question .
    vars Id1 Id2 : Id .

    op getIdsForReset(_,_,_) : Connections Question Bool -> Ids .
    ***(To maintain the consistency of exchanged information between nodes, an
      update is necessary for the old information received. 
      The update is applied when a local configuration communicates by
      message the information on one of the use ports of its instances which is 
      not active, in this case it removes the external information on the 
      refusing of the corresponding provide port (in connection with the 
      concerned use port). 
      The objective of this operation is to determine the Ident Id2 of the 
      instance of the remote node in relation with the local instance 
      identified by Id1, which claims the active function which has a false 
      evaluation. 
      Note that the expected result of this operation is Id2 if it exists, 
      otherwise empty, so the result is a set that can contain either an empty 
      element or a single identifier. )
    eq getIdsForReset((((Id1,Use)--(Id2,Pro)),Cs),
                      [ dst: Id1 , query: isActive(Use) ],false) = Id2 . 
    eq getIdsForReset(Cs,Q1,Val) = empty [owise] . 
    
    op resetState(_,_) : Map{Question,Bool} Ids -> Map{Question,Bool} .  
    --- The update is related only to message related to the refusing function 
    --- who we know its identifier if it exists.
    eq resetState(eState,empty) = eState .
    eq resetState(empty,Ids) = empty .
    ceq resetState(([dst: Id1, query: isRefusing(Pro)] |-> Val, eState), Ids) = 
      eState if (Id1 in Ids) .
    eq resetState((Q1 |-> Val, eState), Ids) = Q1 |-> Val, eState [owise] .
    
endfm
