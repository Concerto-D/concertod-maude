
mod OPERATIONAL-SEMANTICS is

  pr LISTENER-SENSOR-EXAMPLE .

  var Lcx Lcy : LocalConfiguration .
  vars IdIx IdIy : IdentInstances .  
  vars Ix Iy : Instances . 
  vars Lx Ly : Connections .
  vars Rx Ry : Program .
  vars Mx My : MsgToUses .
  vars QSx QSy : Qsend .
  vars QRx QRy : Qreceive .
  vars Hx Hy : SentHistorys .
  
  var  M : Msg .
  var Val : [Bool] .
  var Ct : ComponentType .
  var Use : UsePort .
  var pro : ProvidePort .

  vars Id1 Id2  : IdentInstance .
  vars Qb Qb1 : QBehaviorWithId .
  var Beh : Behavior .
  var Mrk : Marking .
  var IdBeh : IdentBehavior .

  vars P Q : Place .
  var Ps : Places .
  vars Ts : Transitions .
  var TsBeh : Transitions .
  var Tes : TransitionEndings .
  var Ss : Stations .
  var S : Station .

  -------------------------------------------------Rules for component evolution------------------------------------------------------
  ------------------------------------------------------------------------------------------------------------------------------------
crl [FiringTransitions] : 
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(P, Ps,Ts,Tes) > ,Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx > 
    =>
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(Ps,union(Ts, restrictTransitionsToPlace(TsBeh,P) ),Tes) >, Ix , connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx > 
  if ( restrictTransitionsToPlace(TsBeh,P) =/= empty and
   notActUseWhenLeavinGroupProvide(IdIx,m(Ps,union(Ts, restrictTransitionsToPlace(TsBeh,P) ),Tes) ,< id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(P, Ps,Ts,Tes) > ,Ix,Mx,connectionProIdent(Id1, Lx))) . 


  rl [EndingTransition] : 
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: Qb,marking: m(Ps, t(Q,S,Ss), Ts,Tes) > , Ix,connections: Lx,program: Rx,msgs: Mx,
    receive: QRx,send: QSx,history: Hx > 
    =>
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: Qb,marking: m(Ps, Ts, te(t(Q,S,Ss),S), Tes ) > , Ix,connections: Lx,program: Rx,
    msgs: Mx,receive: QRx,send: QSx,history: Hx >  .

  crl [EnteringPlace] : 
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(Ps, Ts, te(t(Q,S,Ss),S), Tes  ) >  , Ix,connections: Lx,
    program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >  
    =>
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(placeOfStation(S,getStationPlaces(Ct)),Ps, Ts, removeTransitionEndingStation(Tes,S) ) > , 
    Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx > 
    if 
      (isSatisfiedTransitionEndingStation(S,TsBeh,te(t(Q,S,Ss),S), Tes) 
      and 
      connectedAndAllowed(IdIx,placeOfStation(S,getStationPlaces(Ct)), getUsePorts(Ct), < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(Ps, Ts, te(t(Q,S,Ss),S), Tes  ) >,
      < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(placeOfStation(S,getStationPlaces(Ct)),Ps, Ts, removeTransitionEndingStation(Tes,S) ) >,Ix, Lx,Mx)
      ) .  


  crl [FinishingBehavior] : 
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(Ps,empty,empty) > , Ix,connections: Lx,program: Rx,msgs: Mx,
    receive: QRx,send: QSx,history: Hx >   
    =>
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: Qb,marking: m(Ps,empty,empty) > , Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >  
    if (intersection(Ps,placesSourceOfTransitions(TsBeh)) == empty) .

  -------------------------------------------------- Rules for program instructions------------------------------------------------------------
  ---------------------------------------------------------------------------------------------------------------------------------------------
  crl [AddComponentInstance] :   
    < ids: IdIx,instances: Ix,connections: Lx,program: add(Id1, Ct) Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >    
    =>
    < ids: IdIx,instances: insert( < id: Id1,type: Ct,queueBehavior: nil,marking: m(initialPlace(Ct) ,empty,empty)  > , Ix),connections: Lx,program: Rx,
    msgs: Mx,receive: QRx,send: QSx,history: Hx >    
    if (not isUsedIdentInstances(Id1,Ix))   .  

  crl [DeleteComponentInstance] : 
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: Qb,marking: Mrk > ,Ix,connections: Lx,program: del(Id1) Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >    
    =>   
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >  
    if (not inConnectionIdent(Id1,Lx) ) . 

  crl [ConnectPorts] : 
    < ids: IdIx,instances: Ix,connections: Lx,program: con(Id1,Use,Id2,pro) Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >    
    =>   
    < ids: IdIx,instances: Ix,connections: (Id1,Use,Id2,pro), Lx,program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx > 
    if (Id1 =/= Id2 and ((instanceOfIdent(Ix,Id1) in Ix) or (instanceOfIdent(Ix,Id2) in Ix)) and (not inConnectionIdentUsePort(Id1,Use,Lx)) ) . 

  crl [disconnectPorts] : 
    < ids: IdIx,instances: Ix,connections: Lx, program: dcon(Id1,Use,Id2,pro) Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >    
    =>  
    < ids: IdIx,instances: Ix,connections: delete((Id1,Use,Id2,pro),Lx),program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >  
    if
    (  
    (Id1,Use,Id2,pro) in Lx
    and
    evaluationMsg(IdIx,< Id1  ; isDisconnect(Id1,Use,Id2,pro) >,Mx,Ix,Lx,dcon(Id1,Use,Id2,pro) Rx) == true
    and
    evaluationMsg(IdIx,< Id2 ; isDisconnect(Id1,Use,Id2,pro) >,Mx,Ix,Lx,dcon(Id1,Use,Id2,pro) Rx) == true
    and
    evaluationMsg(IdIx,< Id1 ; isActive(Use) >,Mx,Ix,Lx,dcon(Id1,Use,Id2,pro) Rx) == false
    ) .
  
  crl [PushingBehavior] : 
   < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: Qb,marking: Mrk >,Ix,connections: Lx, program: pushB(Id1, Beh, IdBeh) Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx > 
    =>   
   < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: append(Qb,(IdBeh ; Beh)),marking: Mrk >,Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >  
    if (isBehaviorOfComponent(Beh,Ct)) .

  crl [Waiting] : 
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: Qb,marking: Mrk > ,Ix,connections: Lx, program: wait(Id2,IdBeh) Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx > 
    =>   
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: Qb,marking: Mrk > ,Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx > 
    if (evaluationMsg(IdIx,< Id2 ; isCompleted(IdBeh) >,Mx,Ix,Lx, Rx) == true ) .

  -----------------------------------------------Rules for collecting messages related to external used functions------------------------------------------
  ---------------------------------------------------------------------------------------------------------------------------------------------------------

  crl [MsgToUsesForFiringTransitions] : 
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(P, Ps,Ts,Tes) > , Ix,connections: Lx,program: Rx,msgs: Mx,
    receive: QRx,send: QSx,history: Hx >  
    =>
    < ids: IdIx, instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(P, Ps,Ts,Tes) > , Ix ,connections: Lx,program: Rx,msgs: Mx,
    receive: QRx,send: append(QSx,collectFunctionFiring(IdIx,m(Ps,union(Ts, restrictTransitionsToPlace(TsBeh,P) ),Tes),< id: Id1,type: Ct,
    queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(P, Ps,Ts,Tes) > , Ix,connectionProIdent(Id1,Lx),Mx,Hx,QSx)),history: Hx >  
    if (restrictTransitionsToPlace(TsBeh,P) =/= empty and collectFunctionFiring(IdIx,m(Ps,union(Ts, restrictTransitionsToPlace(TsBeh,P) ),Tes),
    < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(P, Ps,Ts,Tes) > , Ix,connectionProIdent(Id1,Lx ),Mx,Hx,QSx) =/= nil) . 

  crl [MsgToUsesForEnteringPlace] : 
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(Ps, Ts, te(t(Q,S,Ss),S), Tes  ) >  , Ix,connections: Lx,program: Rx,
    msgs: Mx,receive: QRx,send: QSx,history: Hx > 
    =>
    < ids: IdIx,instances: < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(Ps, Ts, te(t(Q,S,Ss),S), Tes  ) >  , Ix,connections: Lx,program: Rx,
    msgs: Mx,receive: QRx,send: append(QSx,collectFunctionsEnteringPlace(IdIx,placeOfStation(S,getStationPlaces(Ct)), getUsePorts(Ct), < id: Id1,type: Ct,
    queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(Ps, Ts, te(t(Q,S,Ss),S), Tes  ) >,
    < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(placeOfStation(S,getStationPlaces(Ct)),Ps, Ts, removeTransitionEndingStation(Tes,S) ) >,Ix,Lx,Mx,Hx,QSx)), history: Hx > 
    if 
    (
      isSatisfiedTransitionEndingStation(S,TsBeh,te(t(Q,S,Ss),S), Tes) 
      and
      (collectFunctionsEnteringPlace(IdIx,placeOfStation(S,getStationPlaces(Ct)), getUsePorts(Ct), < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(Ps, Ts, te(t(Q,S,Ss),S), Tes) >,
      < id: Id1,type: Ct,queueBehavior: (IdBeh ; b(TsBeh)) Qb,marking: m(placeOfStation(S,getStationPlaces(Ct)),Ps, Ts, removeTransitionEndingStation(Tes,S) ) >,Ix, Lx,Mx,Hx,QSx) =/= nil )
    ) .

  crl [MsgToUsesFordisconnectPorts] : 
    < ids: IdIx,instances: Ix,connections: Lx,program: dcon(Id1,Use,Id2,pro) Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >    
    =>  
    < ids: IdIx,instances: Ix,connections: Lx,program: dcon(Id1,Use,Id2,pro) Rx,msgs: Mx,receive: QRx,
    send: append(QSx,collectFunctionsDiscon(IdIx,(Id1,Use,Id2,pro),Mx,Hx,QSx)),history: Hx >   
    if (((Id1,Use,Id2,pro) in Lx)  and (collectFunctionsDiscon(IdIx,(Id1,Use,Id2,pro),Mx,Hx,QSx) =/= nil) ) .

  crl [MsgToUsesForWait] :
    < ids: IdIx,instances: Ix,connections: Lx,program: wait(Id1,IdBeh) Rx,msgs: Mx,receive: QRx,send: QSx,history: Hx >     
    =>  
    < ids: IdIx,instances: Ix,connections: Lx,program: wait(Id1,IdBeh) Rx,msgs: Mx,receive: QRx,
    send: append(QSx,collectFunctionWait(IdIx,Id1,IdBeh,Mx,Hx,QSx)),history: Hx >    
    if (collectFunctionWait(IdIx,Id1,IdBeh,Mx,Hx,QSx) =/= nil ) .

  --------------------------------------------------------------Rules for communication---------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------------------------------------------------------------------

  crl [SendRequest] : 
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: M QSx,history: Hx > , 
    < ids: IdIy,instances: Iy,connections: Ly,program: Ry,msgs: My,receive: QRy,send: QSy,history: Hy >  
    =>
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: addMsgExternProcess(M,Mx),receive: QRx,send: QSx, history: (Hx, M) >  ,  
    < ids: IdIy,instances: Iy,connections: Ly,program: Ry,msgs: My,receive: append(QRy, (M ; bot) ),send: QSy,history: Hy > 
    if ( (not isMsgProcessedLocally(M,IdIx)) and isMsgProcessedLocally(M,IdIy) ) .

  crl [SendevaluationFunction] : 
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: M QSx,history: Hx > , 
    < ids: IdIy,instances: Iy,connections: Ly,program: Ry,msgs: My,receive: QRy,send: QSy,history: Hy >   
    =>
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: upDateMsgToUsesSend(Mx,identInstanceonnectionWhenSendActive(Lx,M,localEvaluationMsg(M,Ix,Lx,Rx))),
    receive: QRx,send: QSx,history: Hx > , 
    < ids: IdIy,instances: Iy,connections: Ly,program: Ry,msgs: My,receive: append(QRy, (M ; localEvaluationMsg(M,Ix,Lx,Rx)) ),send: QSy,history: Hy >  
    if ( isMsgProcessedLocally(M,IdIx) and ((M in Hy) and (not existMsgInReceiveQueue(M,QRy) )  ) ) .

  crl [ReceivesRequest] : 
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: Mx,receive: (M ; Val ) QRx,send: QSx,history: Hx >  
    =>
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: Mx,receive: QRx,send: append(QSx, M ),history: Hx > 
    if ( isMsgProcessedLocally(M,IdIx) ) .  

  crl [ReceivesevaluationFunction] : 
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: Mx,receive: (M ; Val ) QRx,send: QSx,history: Hx >   
    =>
    < ids: IdIx,instances: Ix,connections: Lx,program: Rx,msgs: substitueEvaluationMsg(Mx,M,Val),receive: QRx,send: QSx,history: delete(M,Hx) >  
    if ( not isMsgProcessedLocally(M,IdIx) ) .  

endm

  