
mod OPERATIONAL-SEMANTICS is

        inc CONCERTO-D-SYSTEM .
        inc CONSISTENCY-PORTS-FIRING-TRANSITION .
        inc CONSISTENCY-PORTS-ENTERING-PLACE .
        inc COLLECT-EXTERNAL-MESSAGES-FIRING .
        inc COLLECT-EXTERNAL-MESSAGES-WAIT .
        inc COLLECT-EXTERNAL-MESSAGES-DISCONNECT .
        inc COLLECT-EXTERNAL-MESSAGES-ENTERING-PLACE .
        inc UPDATE-COMMUNICATION-MESSAGES .

  --- Considering two nodes x and y

  vars Dst Id1 Id2 : Id .
  var Idsx Idsy : Ids .
  var Q : Query .
  var R : Question .
  vars Isx Isy : Instances .
  vars Csx Csy : Connections .
  vars RPx, RPy : Program .
  vars eStatex eStatey : Map{Question, Bool} .
  vars OutAnsx OutAnsy : List{Question} . 
  vars OutReqx OutReqy : List{Question} .
  vars Hx Hy : Set{Question} .
  vars iMsgsx iMsgsy : List{Message} .
  var Val : Bool .
  var Ct : ComponentType .
  var Use : UsePort .
  var Pro : ProvidePort .

  vars Qb Qb1 : List{PushedBehavior} .
  var B : Behavior .
  var M : Marking .
  var IdB : Id .

  vars P P1 P2 : Place .
  var Ps : Places .
  vars Ts : Transitions .
  var TsB : Transitions .
  var Tes : TransitionEndings .
  var Ss : Stations .
  var S : Station .

  -------------------------------------------------Rules for component evolution------------------------------------------------------
  ------------------------------------------------------------------------------------------------------------------------------------

crl [FiringTransitions] : 
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m((P, Ps),Ts,Tes) }) , Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      > 
    =>
    < nodeInventory: Idsx,
      instances:  (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(Ps,union(Ts, getTransitionsofPlace(TsB,P) ),Tes) }), Isx , 
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >  
    if ( getTransitionsofPlace(TsB,P) =/= empty and
        isSafeToFire(Idsx,m(Ps,union(Ts, getTransitionsofPlace(TsB,P) ),Tes) ,(Id1 |-> { type: Ct,
        queue: (IdB ; b(TsB)) Qb, marking: m(P, Ps,Ts,Tes) } ,Isx),eStatex,getPConnectionsofCInst(Id1, Csx))) . 


  rl [EndingTransition] : 
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: Qb, marking: m(Ps, t(P1,S,Ss), Ts,Tes) }) , Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      > 
    =>
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: Qb, marking: m(Ps, Ts, te(t(P1,S,Ss),S), Tes ) }) , Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx  >   .

  crl [EnteringPlace] : 
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(Ps, Ts, te(t(P1,S,Ss),S), Tes  ) }), Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >   
    =>
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb,
      marking: m(getPlacefromStation(S,(Ct).stationPlaces),Ps, Ts, rmTesOfStation(Tes,S) ) }) , Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >  
    if 
      (isSatisfiedTransitionEndingStation(S,TsB,te(t(P1,S,Ss),S), Tes) and 
      isConnectedAndAllowed(Idsx,Id1,getPlacefromStation(S,(Ct).stationPlaces), (Ct).groupUses, { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(Ps, Ts, te(t(P1,S,Ss),S), Tes) },
      { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(getPlacefromStation(S,(Ct).stationPlaces),Ps, Ts, rmTesOfStation(Tes,S) ) } ,Isx, Csx,eStatex)
      ) .  

  crl [FinishingBehavior] : 
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(Ps,empty,empty) }) , Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >  
    =>
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: Qb, marking: m(Ps,empty,empty) })  , Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >  
    if (intersection(Ps,getSourcesOfTransitions(TsB)) == empty) .

  -------------------------------------------------- Rules for program instructions------------------------------------------------------------
  ---------------------------------------------------------------------------------------------------------------------------------------------
 

  crl [AddComponentInstance] :   
    < nodeInventory: Idsx,
      instances: Isx,
      connections: Csx,
      program: add(Id1, Ct) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >    
    =>
    < nodeInventory: Idsx,
      instances: insert(Id1, { type: Ct, queue: nil, 
                               marking: m((Ct).initial, empty, empty) }, Isx),
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >     
    if (not $hasMapping(Isx, Id1))   .  

  crl [DeleteComponentInstance] : 
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: Qb, marking: M }) ,Isx,
      connections: Csx,
      program: del(Id1) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >   
    =>   
    < nodeInventory: Idsx,
      instances: Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >   
    if (not isCInstinConnections(Id1,Csx) ) . 

  crl [ConnectPorts] : 
    < nodeInventory: Idsx,
      instances: (Dst |-> { type: Ct, queue: Qb, marking: M }) , Isx,
      connections: Csx,
      program: con((Id1,Use)--(Id2,Pro)) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >     
    =>   
    < nodeInventory: Idsx,
      instances: (Dst |-> { type: Ct, queue: Qb, marking: M }) , Isx,
      connections: (Id1,Use)--(Id2,Pro), Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      > 
    if (Id1 =/= Id2 and ((Dst == Id1) or (Dst == Id2)) and (not isUseinConnections(Id1,Use,Csx)) ) . 

  crl [disconnectPorts] : 
    < nodeInventory: Idsx,
      instances: Isx,
      connections: (Id1,Use)--(Id2,Pro), Csx, 
      program: dcon((Id1,Use)--(Id2,Pro)) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >     
    =>  
    < nodeInventory: Idsx,
      instances: Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      > 
    if
    ( 
    question([ dst: Id1 , query: onDisconnect((Id1,Use)--(Id2,Pro)) ],Idsx,eStatex,Isx,Csx,dcon((Id1,Use)--(Id2,Pro)) RPx) == true and
    question([ dst: Id2 , query: onDisconnect((Id1,Use)--(Id2,Pro)) ],Idsx,eStatex,Isx,Csx,dcon((Id1,Use)--(Id2,Pro)) RPx) == true and 
    question([ dst: Id1 , query: isActive(Use) ],Idsx,eStatex,Isx,Csx,dcon((Id1,Use)--(Id2,Pro)) RPx) == false
    ) .
  
  crl [PushingBehavior] : 
   < nodeInventory: Idsx,
     instances: (Id1 |-> { type: Ct, queue: Qb, marking: M }) , Isx,
     connections: Csx, 
     program: pushB(Id1, B, IdB) RPx,
     externState: eStatex,
     outgoingAnswers: OutAnsx,
     outgoingQuestions: OutReqx,
     history: Hx,
     incomingMsgs: iMsgsx >  
    =>   
   < nodeInventory: Idsx,
     instances: ( Id1 |-> { type: Ct, queue: append(Qb,(IdB ; B)), marking: M } ), Isx,
     connections: Csx,
     program: RPx,
     externState: eStatex,
     outgoingAnswers: OutAnsx,
     outgoingQuestions: OutReqx,
     history: Hx,
     incomingMsgs: iMsgsx 
      >   
    if (B in (Ct).behaviors) .

  --- TODO éventuel (à appliquer partout) Fred manipuler les queues directement dans la règle sans evaluation
  --- TODO plus de règles (locales et externes)
  crl [Waiting] : 
    < nodeInventory: Idsx,
      instances: ( Id1 |-> { type: Ct, queue: Qb, marking: M }), Isx,
      connections: Csx, 
      program: wait(Id2,IdB) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >  
    =>   
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: Qb, marking: M }), Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >  
    if (question([ dst: Id2 , query: isCompleted(IdB) ],Idsx,eStatex,Isx,Csx,wait(Id2,IdB) RPx) == true ) .
   
  -----------------------------------------------Rules for collecting messages related to external used functions------------------------------------------
  ---------------------------------------------------------------------------------------------------------------------------------------------------------

  crl [RequestsForFiringTransitions] : 
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m((P, Ps),Ts,Tes) }) , Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >   
    =>
    < nodeInventory: Idsx, 
      instances:  (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m((P, Ps),Ts,Tes) }) , Isx ,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: append(OutReqx,collectMsgFiring(Idsx,m(Ps,union(Ts, getTransitionsofPlace(TsB,P) ),Tes),
      (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m((P, Ps),Ts,Tes) }) , Isx,getPConnectionsofCInst(Id1,Csx),eStatex,Hx,OutReqx)),
      history: Hx,
      incomingMsgs: iMsgsx 
      >   
    if (getTransitionsofPlace(TsB,P) =/= empty and collectMsgFiring(Idsx,m(Ps,union(Ts, getTransitionsofPlace(TsB,P) ),Tes),
    (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m((P, Ps),Ts,Tes) }) , Isx,getPConnectionsofCInst(Id1,Csx ),eStatex,Hx,OutReqx) =/= nil) . 

  crl [RequestsForEnteringPlace] : 
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(Ps, Ts, te(t(P,S,Ss),S), Tes) })  , Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      > 
    => 
    < nodeInventory: Idsx,
      instances: (Id1 |-> { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(Ps, Ts, te(t(P,S,Ss),S), Tes  ) })  , Isx,
      connections: Csx,
      program: RPx, 
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: append(OutReqx,collectMsgEnteringPlace(Idsx,Id1,getPlacefromStation(S,(Ct).stationPlaces), (Ct).groupUses, 
      { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(Ps, Ts, te(t(P,S,Ss),S), Tes  ) },
      { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(getPlacefromStation(S,(Ct).stationPlaces),Ps, Ts, rmTesOfStation(Tes,S) ) },
      Isx,Csx,eStatex,Hx,OutReqx)), 
      history: Hx,
      incomingMsgs: iMsgsx 
      >  
    if 
    ( isSatisfiedTransitionEndingStation(S,TsB,te(t(P,S,Ss),S), Tes)  and
      (collectMsgEnteringPlace(Idsx,Id1,getPlacefromStation(S,(Ct).stationPlaces), (Ct).groupUses, 
      { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(Ps, Ts, te(t(P,S,Ss),S), Tes) },
      { type: Ct, queue: (IdB ; b(TsB)) Qb, marking: m(getPlacefromStation(S,(Ct).stationPlaces),Ps, Ts, rmTesOfStation(Tes,S) ) },
      Isx, Csx,eStatex,Hx,OutReqx) =/= nil )
    ) .

  crl [RequestsForDisconnectPorts] : 
    < nodeInventory: Idsx,
      instances: Isx,
      connections: ((Id1,Use)--(Id2,Pro)), Csx,
      program: dcon((Id1,Use)--(Id2,Pro)) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >     
    =>  
    < nodeInventory: Idsx,
      instances: Isx,
      connections: ((Id1,Use)--(Id2,Pro)), Csx,
      program: dcon((Id1,Use)--(Id2,Pro)) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: append(OutReqx,collectMsgDisconnect(Idsx,((Id1,Use)--(Id2,Pro)),eStatex,Hx,OutReqx)),
      history: Hx,
      incomingMsgs: iMsgsx 
      >    
    if ( (collectMsgDisconnect(Idsx,(Id1,Use)--(Id2,Pro),eStatex,Hx,OutReqx) =/= nil) ) .

  crl [RequestsForWait] :
    < nodeInventory: Idsx,
      instances: Isx,
      connections: Csx,
      program: wait(Id1,IdB) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: iMsgsx 
      >     
    =>  
    < nodeInventory: Idsx,
      instances: Isx,
      connections: Csx,
      program: wait(Id1,IdB) RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx, 
      outgoingQuestions: append(OutReqx,collectMsgWait(Idsx,Id1,IdB,eStatex,Hx,OutReqx)),
      history: Hx,
      incomingMsgs: iMsgsx 
      >     
    if (collectMsgWait(Idsx,Id1,IdB,eStatex,Hx,OutReqx) =/= nil ) .

  --------------------------------------------------------------Rules for communication---------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------------------------------------------------------------------
 
rl [SendRequest] : 
    < nodeInventory: Idsx, 
      instances: Isx, 
      connections: Csx, 
      program: RPx, 
      externState: eStatex, 
      outgoingAnswers: OutAnsx, 
      outgoingQuestions: [ dst: Dst, query: Q ] OutReqx, 
      history: Hx,
      incomingMsgs: iMsgsx > , 
    < nodeInventory: (Dst, Idsy), 
      instances: Isy, 
      connections: Csy, 
      program: RPy, 
      externState: eStatey, 
      outgoingAnswers: OutAnsy, 
      outgoingQuestions: OutReqy, 
      history: Hy,
      incomingMsgs: iMsgsy >
    => 
    < nodeInventory: Idsx, 
      instances: Isx, 
      connections: Csx, 
      program: RPx, 
      externState: eStatex,
      outgoingAnswers: OutAnsx, 
      outgoingQuestions: OutReqx, 
      history: [ dst: Dst, query: Q ], Hx,
      incomingMsgs: iMsgsx > ,
    < nodeInventory: (Dst, Idsy), 
      instances: Isy, 
      connections: Csy, 
      program: RPy, 
      externState: eStatey, 
      outgoingAnswers:  OutAnsy,
      outgoingQuestions: OutReqy,
      history: Hy,
      incomingMsgs: append(iMsgsy, mkMsg([ dst: Dst, query: Q ]))     > .
    

  crl [SendAnswer] : 
    < nodeInventory: Idsx, 
      instances: Isx, 
      connections: Csx, 
      program: RPx, 
      externState: eStatex, 
      outgoingAnswers: R OutAnsx,  
      outgoingQuestions: OutReqx, 
      history: Hx,
      incomingMsgs: iMsgsx > , 
    < nodeInventory: Idsy, 
      instances: Isy, 
      connections: Csy, 
      program: RPy, 
      externState: eStatey, 
      outgoingAnswers: OutAnsy, 
      outgoingQuestions: OutReqy, 
      history: R, Hy,
      incomingMsgs: iMsgsy >
    => 
    < nodeInventory: Idsx, 
      instances: Isx, 
      connections: Csx, 
      program: RPx, 
      externState: upDateReceivedAnswers(eStatex,IdConnectionWhenSendActive(Csx,R,localQuestion(R,Isx,Csx,RPx))) ,
      outgoingAnswers: OutAnsx, 
      outgoingQuestions: OutReqx, 
      history: Hx,
      incomingMsgs: iMsgsx > ,
    < nodeInventory: Idsy, 
      instances: Isy, 
      connections: Csy, 
      program: RPy, 
      externState: eStatey,
      outgoingAnswers: OutAnsy, 
      outgoingQuestions: OutReqy,
      history: (R, Hy),
      incomingMsgs: append(iMsgsy, mkMsg([ question: R, value: localQuestion(R,Isx,Csx,RPx) ])) > 
    if (not occurs(mkMsg(R), iMsgsy)) .

    rl [ReceiveRequest] : 
    < nodeInventory: (Dst, Idsx),
      instances: Isx,
      connections: Csx,
      program: RPx,
      externState: eStatex,
      outgoingAnswers: OutAnsx,
      outgoingQuestions: OutReqx,
      history: Hx,
      incomingMsgs: mkMsg([dst: Dst, query: Q]) iMsgsx >   
    => 
  < nodeInventory: (Dst,Idsx),
    instances: Isx,
    connections: Csx,
    program: RPx,
    externState: eStatex,
    outgoingAnswers: append(OutAnsx,[ dst: Dst, query: Q ]), 
    outgoingQuestions: OutReqx,
    history: Hx,
    incomingMsgs: iMsgsx >  .

    rl [ReceiveAnswer] : 
  < nodeInventory: Idsx,
    instances: Isx,
    connections: Csx,
    program: RPx,
    externState: eStatex,
    outgoingAnswers: OutAnsx, 
    outgoingQuestions: OutReqx,
    history: (R,Hx),
    incomingMsgs: mkMsg([ question: R, value: Val ]) iMsgsx >  
      =>
  < nodeInventory: Idsx,
    instances: Isx,
    connections: Csx,
    program: RPx,
    externState: insert(R,Val,eStatex),
    outgoingAnswers: OutAnsx, 
    outgoingQuestions: OutReqx,
    history: Hx,
    incomingMsgs: iMsgsx > .
    
endm

