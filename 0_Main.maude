
***(
  This file contains a global description of the Maude program which formalizes 
  the Distributed Reconfiguration Language Concerto-D.
    content: 
    A - Several functional modules define mainly data types used to formalize 
        the CONCERTO-D concepts:
    *  A functional module (described below in this file: 1_Basic-sorts) which 
    defines only a few sorts. 
        Defining these sorts first enables us to create views on them, which 
        allows to use the views to instantiate parameterized predefined Maude 
        structures such as sets and lists. 
        Example: we need to create a set on our sort Place, so we start with 
        the following steps:
        * Declare Place in the first functional module.
        * Build a view `Place` which is mapping from the module `TRIV` to the 
          module `DECLARATION-SORTS`.
          The `TRIV` module is a trivial module which has a single sort Elt. 
          the view will be:
            view Place from TRIV to DECLARATION-SORTS is
              sort Elt to Place .
            endv
        * we can then import pr SET{Place} which allows us to instantiate the 
          predefined module SET{X :: TRIV} by Place and thus define a set 
          structure containing places.
    
    * Module DECLARATION-SORTS is followed by a view declarations to use 
      (file_2: Views)
    * Basic data of Concerto-D are defined in files 3 to 8.
    * Some of the operators used for the rewriting rules are defined 
      separately in the files 9, 10 and 11 
    B - A functional module given in 12_example_update_cps to describe a 
       particular application which respects the formalization of CONCERTO-D 
       concepts described in A. This module was automatically generated by 
       a Python script that we implemented.
    
    C- A system module gives the dynamic aspect of CONCERTO-D applications 
       through rewriting rules given in 13_Operational-semantics-Concerto-D 
       Finally, some verification results on the example of 
       12_example_update_cps are given in the additional file 
       14_Results-search. 
)

--- Main ---

load 1_Basic-sorts
load 2_Views 
load 3_Basic-data-type-Concerto
load 4_Component-type
load 5_Program
load 6_Component-instance
load 7_Configuration
load 8_Internal-net
load 9_Operational-semantics-functions
load 10_Collect-messages
load 11_Communication-functions
load 12_Operational-semantics-Concerto-D
load 13_example_update_cps
load 14_Results-search