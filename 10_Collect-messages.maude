--- Auxiliary Operations for the Operational Semantics --- 
--- Operations related to messages ---

fmod COLLECT-EXTERNAL-MESSAGES-FIRING is

  inc CONCERTO-D-CONFIGURATION .

  var Ids : Ids . 
  var Is : Instances .
  var Cs : Connections .
  var Use : UsePort .
  var Pro : ProvidePort .
  vars Id1 Id2 : Id .
  var M : Marking .
  var eState : Map{Question,Bool} .
  var H : Set{Question} .
  var OutQs : List{Question} .

  op collectMsgFiring(_,_,_,_,_,_,_) : Ids Marking Instances Connections Map{Question,Bool} Set{Question} List{Question} -> List{Question} .
  ***(used to determine msg related to remote questions that allow to apply
    the rule firing transition. 
    It aims to build a queue of external [ dst: Id1 , query: isActive(Use) ]  
    messages for use ports whose current valuation in Map{Question,Bool} does 
    not allow the rule to be applied.
    Knowing that the provide port linked to their use port wants to change the
    status of its provide port from active to inactive, we add the message:
    [ dst: Id1 , query: isActive(Use) ] of each use port to the queue of
    questions, on condition that the question for this message is not currently 
    being processed.
    This last condition is verified if [ dst: Id1 , query: isActive(Use) ]  
    doesn't belong to either Set{Question} or List{Question}.)
  eq collectMsgFiring(Ids, M, Is, empty, eState, H, OutQs) = nil .
  ceq collectMsgFiring(Ids, M, Is, 
                       (Id1, Use)--(Id2, Pro), Cs, eState, H, OutQs) = 
    append([ dst: Id1 , query: isActive(Use) ], 
           collectMsgFiring(Ids,M,Is,Cs,eState,H,OutQs))
  if ((not [dst: Id1 , query: isActive(Use)] in H) and 
      (not (occurs([dst: Id1, query: isActive(Use)], OutQs))) and
      (not (Id1 in Ids)) and
      (question([ dst: Id1, query: isActive(Use) ], 
                Ids, eState, empty, empty, nil) =/= false) and
      localQuestion([ dst: Id2 , query: isActive(Pro)], Is, empty, nil) and   
      not(activeMarking(Is[Id2],Pro,M))) .
  eq collectMsgFiring(Ids,M,Is,(Id1,Use)--(Id2,Pro),Cs,eState,H,OutQs) = 
    collectMsgFiring(Ids,M,Is,Cs,eState,H,OutQs) [owise] .

endfm


***(We follow a similar reasoning to construct the messages needed 
  to apply the rules: 
  - AskQuestionForEnteringPlace, 
  - AskQuestionForDisconnectPorts, 
  - AskQuestionForWait. )

fmod COLLECT-EXTERNAL-MESSAGES-ENTERING-PLACE is

  inc CONCERTO-D-CONFIGURATION .

  var P : Place .
  var Ps : Places .
  var GU :  GroupUses .
  vars I I' : Instance .
  var Is : Instances .
  var Cs : Connections .
  var eState : Map{Question,Bool} .
  var Use : UsePort .
  var Pro : ProvidePort .
  vars Id1 Id2 : Id .
  var H : Set{Question} .
  var OutQs : List{Question} .  
  var Ids : Ids .   

  op collectMsgEnteringPlace(_,_,_,_,_,_,_,_,_,_,_) : 
  Ids Id Place GroupUses Instance Instance Instances Connections Map{Question,Bool} Set{Question} List{Question} -> List{Question} .
  eq collectMsgEnteringPlace(Ids,Id1,P,empty,I,I',Is,Cs,eState,H,OutQs) = nil .
  ceq collectMsgEnteringPlace(Ids,Id1,P,g(Use ? Ps),GU,I,I',Is,Cs,eState,H,OutQs) = 
  append(collectConnected(Ids,Use,Id1,Cs,eState,H,OutQs),append(collectAllowed(Ids,Use,Id1,Is,Cs,eState,H,OutQs), collectMsgEnteringPlace(Ids,Id1,P,GU,I,I',Is,Cs,eState,H,OutQs))) 
  if  ((P in Ps) and not(isActiveLocal(I,Use)) and isActiveLocal(I',Use)).   
  eq collectMsgEnteringPlace(Ids,Id1,P,g(Use ? Ps),GU,I,I',Is,Cs,eState,H,OutQs) = collectMsgEnteringPlace(Ids,Id1,P,GU,I,I',Is,Cs,eState,H,OutQs) [owise] .

  op collectConnected(_,_,_,_,_,_,_) : Ids UsePort Id Connections Map{Question,Bool} Set{Question} List{Question} -> List{Question} . 
  ceq collectConnected(Ids,Use,Id1,(Id1,Use)--(Id2,Pro),Cs,eState,H,OutQs) = [ dst: Id2 , query: isConnected((Id1,Use)--(Id2,Pro)) ] 
  if(
    (not ([ dst: Id2 , query: isConnected((Id1,Use)--(Id2,Pro)) ]  in H)) and 
    (not (occurs([ dst: Id2 , query: isConnected((Id1,Use)--(Id2,Pro)) ],OutQs)))  and
    (not (Id2 in Ids)) and
    ( externQuestion([ dst: Id2 , query: isConnected((Id1,Use)--(Id2,Pro)) ],eState ) =/= true )
    ) .
  eq collectConnected(Ids,Use,Id1,Cs,eState,H,OutQs) = nil [owise] .

  op collectAllowed(_,_,_,_,_,_,_,_) : Ids UsePort  Id Instances Connections Map{Question,Bool} Set{Question} List{Question} -> List{Question} . 
  ceq collectAllowed(Ids,Use,Id1,Is,((Id1,Use)--(Id2,Pro)),Cs,eState,H,OutQs) = [ dst: Id2 , query:  isRefusing(Pro) ] 
  if (
      (not [ dst: Id2 , query:  isRefusing(Pro) ] in H) and 
      (not (occurs([ dst: Id2 , query:  isRefusing(Pro) ],OutQs)))  and
      (not (Id2 in Ids)) and  
      ( externQuestion([ dst: Id2 , query:  isRefusing(Pro) ],eState) =/= false)   
    ) .
  eq collectAllowed(Ids,Use,Id1,Is,Cs,eState,H,OutQs) = nil [owise] .

endfm

fmod COLLECT-EXTERNAL-MESSAGES-WAIT is

  inc CONCERTO-D-CONFIGURATION .

  var Id1 : Id .
  var IdB : Id .
  var eState : Map{Question,Bool} .
  var H : Set{Question} .
  var OutQs : List{Question} .
  var Ids : Ids .   

  op collectMsgWait(_,_,_,_,_,_) : Ids Id Id Map{Question,Bool} Set{Question} List{Question} -> List{Question} .
  ceq collectMsgWait(Ids,Id1,IdB,eState,H,OutQs) = [ dst: Id1 , query:  isCompleted(IdB) ] 
  if(
    (not ([ dst: Id1 , query:  isCompleted(IdB) ]   in H)) and 
    (not (occurs([ dst: Id1 , query:  isCompleted(IdB) ] ,OutQs)))  and
    (not (Id1 in Ids)) and
    (externQuestion([ dst: Id1 , query:  isCompleted(IdB) ], eState) =/= true)
    ) .
  eq collectMsgWait(Ids,Id1,IdB,eState,H,OutQs) = nil [owise] .

endfm

fmod COLLECT-EXTERNAL-MESSAGES-DISCONNECT is

  inc CONCERTO-D-CONFIGURATION .

  var Use : UsePort .
  var Pro : ProvidePort .
  vars Id1 Id2 : Id .
  var eState : Map{Question,Bool} .
  var H : Set{Question} .
  var OutQs : List{Question} .
  var Ids : Ids . 
  var C : Connection .  

  op collectMsgDisconnect(_,_,_,_,_) : Ids Connection Map{Question,Bool} Set{Question} List{Question} -> List{Question} .
  ceq collectMsgDisconnect(Ids,((Id1,Use)--(Id2,Pro)),eState,H,OutQs) =
   append(collectActive(Id1,Use,eState,H,OutQs),(collectDisconnect(Id1,((Id1,Use)--(Id2,Pro)),eState,H,OutQs))) 
  if (not (Id1 in Ids) ) .
  ceq collectMsgDisconnect(Ids,((Id1,Use)--(Id2,Pro)),eState,H,OutQs) = 
  collectDisconnect(Id2,((Id1,Use)--(Id2,Pro)),eState,H,OutQs) 
  if (not (Id2 in Ids) ) .
  eq collectMsgDisconnect(Ids,((Id1,Use)--(Id2,Pro)),eState,H,OutQs) = nil [owise] .

  op collectActive(_,_,_,_,_) : Id UsePort Map{Question,Bool} Set{Question} List{Question} -> List{Question} .
  ceq collectActive(Id1,Use,eState,H,OutQs) = [ dst: Id1 , query: isActive(Use) ] 
  if(
    (not ([ dst: Id1 , query: isActive(Use) ]   in H)) and 
    (not (occurs([ dst: Id1 , query: isActive(Use) ] ,OutQs)))  and
    (externQuestion([ dst: Id1 , query: isActive(Use) ], eState) =/= false)
    ) .
  eq collectActive(Id1,Use,eState,H,OutQs) = nil [owise] .

  op collectDisconnect(_,_,_,_,_) : Id Connection Map{Question, Bool} Set{Question} List{Question} -> List{Question} .
  ceq collectDisconnect(Id1,C,eState,H,OutQs) = [ dst: Id1 , query: onDisconnect(C) ] 
  if(
    (not ([ dst: Id1 , query: onDisconnect(C) ]   in H)) and 
    (not (occurs([ dst: Id1 , query: onDisconnect(C) ], OutQs))) and
    (externQuestion([ dst: Id1 , query: onDisconnect(C) ], eState) =/= true)
    ) .
  eq collectDisconnect(Id1,C,eState,H,OutQs) = nil [owise] .

endfm