fmod CONCERTO-D-CONFIGURATION is 

  inc ID-FUNCTIONS-COMMUNICATED .
  inc INSTANCE .
  inc PROGRAM .
  inc CONNECTION .
  inc BOOL-WITH-BOT .
  inc DECLARATION-SORTS . 

  sorts  MsgToUses SentHistorys . ---define new sorts of type set
  sorts  Qsend Qreceive  . ---define new sorts of type list
  subsort Msg  < SentHistory . --- Msg is also an element of W 
  subsort Msg  < Send . ---- Msg is also an element of the send 
  pr SET{MsgToUse} .
    subsort Set{MsgToUse} < MsgToUses . 
  pr SET{SentHistory} .
    subsort Set{SentHistory} < SentHistorys . 
  pr LIST{Send} .
    subsort List{Send} < Qsend . 
  pr LIST{Receive} .
    subsort List{Receive} < Qreceive . 

  vars  M1 M2 : Msg .
  var Mx : MsgToUses .
  vars NewVal val : BoolWithBot .
  var Ix : Instances .
  var Id1 : IdentInstance .
  var IdIx : IdentInstances .
  var IdBeh : IdentBehavior .
  var Ct : ComponentType .
  var Port : Port .
  var Lx : Connections .
  var Rx : Program .
  var L : Connection .
  var Qb : QBehaviorWithId .
  var Mark : Marking .
  var QRx : Qreceive .
 
  op extern(_;_) : Msg BoolWithBot ->   MsgToUse .  
  ---defines a Msg as external (relted to external function) with an evaluation, to be used locally . 

  op (_;_) :  Msg BoolWithBot  -> Receive .  
  --- a message to receive when communicating
  
  op < ids: _,instances: _,connections: _,program: _,msgs: _,receive: _,send: _,history: _ > : 
  IdentInstances Instances Connections Program MsgToUses Qreceive Qsend  SentHistorys -> LocalConfiguration .   

  --- some functions on configuration
  op localFunction(_,_) : Msg IdentInstances -> Bool .  
  --- determine whether a Msg is related to a local function.
  eq localFunction(M1, IdIx) = getIdentForMsg(M1) in IdIx .
 
  op externFunction(_,_) : Msg MsgToUses -> Bool . 
  --- determine whether a message is considered external
  eq externFunction(M1,empty) = false .
  eq externFunction(M1, extern(M1 ; val),Mx ) = true  .
  eq externFunction(M1, extern(M2 ; val),Mx ) = externFunction(M1, Mx) [owise] .

  op addFunctionExtern(_,_) : Msg MsgToUses -> MsgToUses .
  --- add Msg related to an external function with a bot evaluation to MsgToUses if it is not already in this set.
  ceq addFunctionExtern(M1,Mx) =  extern(M1 ; bot),Mx if (not externFunction(M1, Mx )) .  
  eq addFunctionExtern(M1,Mx) = Mx [owise] . 

  op externEvaluation(_,_) : Msg MsgToUses  -> BoolWithBot .  
  ---obtain the evalaution of an external function related to a Msg from MsgToUses
  eq externEvaluation(M1, empty) = bot . 
  eq externEvaluation(M1, extern(M1 ; val), Mx ) = val  .
  eq externEvaluation(M1, extern(M2 ; val), Mx ) = externEvaluation(M1, Mx ) [owise] .

  op substitueEvaluationOfFunction(_,_,_) : MsgToUses Msg BoolWithBot -> MsgToUses .  
  --- substitutes the evaluation related to an external function of Msg in the set of MsgToUses.
  eq substitueEvaluationOfFunction(empty,M1,NewVal) = empty . 
  eq substitueEvaluationOfFunction((extern(M1 ; val), Mx),M1,NewVal) = extern(M1 ; NewVal), Mx  .
  eq substitueEvaluationOfFunction((extern(M1 ; val), Mx),M2,NewVal) = extern(M1 ; val), substitueEvaluationOfFunction(Mx,M2,NewVal) [owise] .
 
  op localEvaluation(_,_,_,_) : Msg Instances Connections Program -> BoolWithBot .  
  ---- gives the evaluation of a local function related to Msg according to certain parameters of a given configuration
  eq localEvaluation (exprActive(Id1,Port), Ix,Lx,Rx) =  if (not isUsedIdentInstances(Id1,Ix)) then false else active(instanceOfIdent(Ix,Id1),Port) fi .   
  ---if the instance does not yet exist, then the active local function: active(Id1,Port) = false, otherwise it is the local active function within the instance. 
  eq localEvaluation (exprRefusing(Id1,Port), Ix,Lx,Rx) =  if (not isUsedIdentInstances(Id1,Ix)) then true else refusing(instanceOfIdent(Ix,Id1),Port) fi .
   ---if the instance does not yet exist, then the refusing local function: refusing(Id1,Port) = true, otherwise it is the local refusing function within the instance.   
  eq localEvaluation (exprIsConnected(Id1,L), Ix,Lx,Rx) = L in Lx . 
  eq localEvaluation (exprDisconnect(Id1,L), Ix,Lx,Rx) = disconnect(L,Rx) . 
  eq localEvaluation (exprCompleted(Id1,IdBeh), (< id: Id1,type: Ct,queueBehavior: Qb,marking: Mark >,Ix),Lx,Rx) =  
  (not existIdentBehaviorehListBeh(IdBeh,Qb) ) and notPushBProg(Id1,IdBeh,Rx) .
  --- the evaluation of completed of an IdBeh depends on whether the push IdBeh exists in the program or in the behavior list.
  eq localEvaluation (exprCompleted(Id1,IdBeh), Ix,Lx,Rx) =  if ((not isUsedIdentInstances(Id1,Ix) ) and notPushBProg(Id1,IdBeh,Rx)) then true else false fi . 
  --- special case the instance doesn't exist and even the push of IdBeh in the program. this is the case when a program is executed and its instance is deleted.

  op evaluation(_,_,_,_,_,_) : IdentInstances Msg MsgToUses Instances Connections Program -> BoolWithBot . 
  --- gives the evaluation of a function related to Msg according to the two cases, the function is local or external
  eq evaluation(IdIx,M1,Mx, Ix,Lx,Rx ) = if (localFunction(M1,IdIx)) then localEvaluation(M1,Ix,Lx,Rx) else externEvaluation(M1,Mx) fi .

  op existMsgInReceiveQueue(_,_) : Msg Qreceive -> Bool .
  --- determine whether a Msg related to a function is already in the queue of messages received. 
  eq existMsgInReceiveQueue(M1,nil) = false .
  ceq existMsgInReceiveQueue(M1,(M2 ; val) QRx) = true if (M1 == M2)  .
  eq existMsgInReceiveQueue(M1,(M2 ; val) QRx) =  existMsgInReceiveQueue(M1, QRx) [owise] .

endfm