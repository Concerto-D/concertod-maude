fmod COMPONENT-TYPE is
  
  inc STATION-PLACE .
  inc TRANSITION-TRANSITION-ENDING .
  inc BEHAVIOR .
  inc PORT .
  inc DECLARATION-SORTS . 
  inc MARKING . 
  
  sorts ComponentType GroupUses GroupProvides .  
  pr SET{GroupUse} .
  subsort Set{GroupUse} < GroupUses . 
  pr SET{GroupProvide} .
  subsort Set{GroupProvide} < GroupProvides . 

  vars Ps Ps1 : Places .
  var Q : InitialPlace .
  var SPs : StationPlaces .
  var Ts  : Transitions . 
  var Bs : Behaviors .
  var GU : GroupUses .
  var GP : GroupProvides .
  vars Use Use1 : UsePort .
  vars Pr Pr1 : ProvidePort .
  var Beh  : Behavior .

  --- Helene getGroup devrait etre une fonction pour tout type de port
  --- Helene ! et ? ne sont pas informatifs
  op (_!_) : UsePort Places -> GroupUse [ctor] . 
  --- GroupUse is defined as tuple : the use port and a group (set) of places
  op (_?_) : ProvidePort Places -> GroupProvide [ctor] . 
  --- GroupProvide is defined as tuple : the Provide port and a group (set) of places
  op { places: _,initial: _,stationPlaces: _,transitions: _,behaviors: _,groupUses: _,groupProvides: _ } : 
  Places InitialPlace StationPlaces Transitions Behaviors GroupUses GroupProvides -> ComponentType [ctor] . 

  --- some operations related to ComponentType used later
  op initialPlace(_) : ComponentType -> Place .
  --- to get the initial place of component type
  eq initialPlace ({ places: Ps,initial: Q,stationPlaces: SPs,transitions: Ts,behaviors: Bs,groupUses: GU,groupProvides: GP }) = Q .

  op getStationPlaces(_) : ComponentType -> StationPlaces . 
  --- to get the set of tuples (station; place)
  eq getStationPlaces ({ places: Ps,initial: Q,stationPlaces: SPs,transitions: Ts,behaviors: Bs,groupUses: GU,groupProvides: GP }) = SPs .

  op getUsePorts(_) : ComponentType -> GroupUses . 
  --- to get the set of the use ports of the component
  eq getUsePorts ({ places: Ps,initial: Q,stationPlaces: SPs,transitions: Ts,behaviors: Bs,groupUses: GU,groupProvides: GP }) = GU .


  op placesOfUsePort(_,_) : UsePort GroupUses -> Places . 
  --- to get places of a use port from a set of use ports
  eq placesOfUsePort(Use,(Use ! Ps),GU) = Ps . 
  eq placesOfUsePort(Use,GU) = empty [owise] . 
   
  op placesOfProvidePort(_,_) : ProvidePort GroupProvides -> Places . 
  --- to get places of a provide port from a set of use ports
  eq placesOfProvidePort(Pr,((Pr ? Ps),GP)) = Ps  . 
  eq placesOfProvidePort(Pr,GP) = empty [owise] . 
   
  op groupPlacesofPort(_,_) : Port ComponentType -> Places . 
  --- to get places of a port use or provide
  eq groupPlacesofPort(Use,{ places: Ps,initial: Q,stationPlaces: SPs,transitions: Ts,behaviors: Bs,groupUses: GU,groupProvides: GP }) = placesOfUsePort(Use,GU)  .
  eq groupPlacesofPort(Pr,{ places: Ps,initial: Q,stationPlaces: SPs,transitions: Ts,behaviors: Bs,groupUses: GU,groupProvides: GP } ) = placesOfProvidePort(Pr,GP)  .

  op isBehaviorOfComponent(_,_) : Behavior ComponentType -> Bool . 
  --- to check whether a behavior is used in ComponentType, in particular in its behaviors
  eq isBehaviorOfComponent(Beh,{ places: Ps,initial: Q,stationPlaces: SPs,transitions: Ts,behaviors: Bs,groupUses: GU,groupProvides: GP }) = Beh in Bs .
  
  op markingWithRespectToPlaces(_,_) : Places ComponentType -> Marking .   
  --- gives the elements of Marking (places, transitions, TransitionEndings) of group of places depending a ComponentType
  eq markingWithRespectToPlaces(Ps1,{ places: Ps,initial: Q,stationPlaces: SPs,transitions: Ts,behaviors: Bs,groupUses: GU,groupProvides: GP }) = 
  m(Ps1, transitionsOfPlacesWithRespectToStations(Ps1,Ts,getStationsfromGroup(Ps1,SPs)), 
  getEndingsfTransitions(transitionsOfPlacesWithRespectToStations(Ps1,Ts,getStationsfromGroup(Ps1,SPs)))) .

endfm




