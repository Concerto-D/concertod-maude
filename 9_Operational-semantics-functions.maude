--------------------------------------------some ops used in the operating rules ------------------------------------------------
-------------------------------------- rules firing transition and entering place  --------------------------------------------------

fmod CONSISTENCY-PORTS-FIRING-TRANSITION is

  inc CONCERTO-D-CONFIGURATION .

  var NewMark : Marking .
  var Ix : Instances .
  vars Id1 Id2 : IdentInstance .
  var Use : UsePort .
  var Pro : ProvidePort .
  var Lx : Connections .
  var Mx : MsgToUses .
  var IdIx : IdentInstances .

  op NotActUseWhenLeavinGroupProvide(_,_,_,_,_) : IdentInstances Marking Instances MsgToUses Connections ->  Bool .
  ---   is used to ensure consistency when firing transitions
  ---   it takes as parameters when used in the firing transition rule: 
  ---   the set of identifiers for all instances of the concerned configuration (concerned by the firing of one of its instances)
  ---   the new marking after firing, 
  ---   the instances of the concerned configuration,
  ---   MsgToUses of messages to use of external functions 
  ---   finally, a subset of Connections related to the configuration, where the instance concerned by firing is a provider.
  ---   so for each connection it checks that the firing of the concerned instance (provider) does not affect the corresponding user
  ---   i.e., if the provider for each connection after a firing goes from active to inactive, this implies that the user must be inactive.
  eq NotActUseWhenLeavinGroupProvide(IdIx,NewMark,Ix,Mx,(Id1,Use,Id2,Pro),Lx) = NotActUseWhenLeavinGroupProvide(IdIx,NewMark,Ix,Mx,Lx) and 
  (
    ( (Evaluation(IdIx,ExprActive(Id2,Pro),Mx, Ix,empty,nil ) == true) and 
    (activeMarking(InstanceOfIdent(Ix,Id2),Pro,NewMark) == false )) 
    implies  (Evaluation(IdIx,ExprActive(Id1,Use),Mx, Ix,empty,nil ) == false) 
  ) .
  eq NotActUseWhenLeavinGroupProvide(IdIx,NewMark,Ix,Mx,empty) = true .

endfm

fmod CONSISTENCY-PORTS-ENTERING-PLACE is

  inc CONCERTO-D-CONFIGURATION .

  var p : Place .
  var ps : Places .
  var GUx :  GroupUses .
  vars i i' : Instance .
  var Is : Instances .
  var Lx : Connections .
  var Mx : MsgToUses .
  vars Use1 Use : UsePort .
  var Pro : ProvidePort .
  vars IdentIns Id1 Id2 : IdentInstance .
  var IdIx : IdentInstances .

  op ConnectedAndAllowed(_,_,_,_,_,_,_,_) : IdentInstances Place GroupUses Instance Instance Instances Connections MsgToUses -> Bool . 
  ---  for the entreing place rule, in addition to the IsSatisfiedTransitionEndingStation condition on the choice of a station as an ending for a transition,
  ---  we need the satifaction of ConnectedProvidedAllowed
  ---  this function takes as parameters:
  ---  the set of identifiers for all instances of the concerned configuration (concerned by the firing of one of its instances)
  ---  the place concerned by the station chosen for the rule, 
  ---  the uses ports of the instance concerned by the rule, 
  ---  the instance itself before the rule is fired
  ---  the instance after the rule is fired 
  ---  the other instances of the configuration as well as its connections and the tuple MsgToUses of communication messages.
  ---  so for each use port of the instance concerned by the rule, we perform the following check:
  ---  if, by applying the rule, the status of this port is changed from inactive to active, 
  ---  knowing that the place of the function belongs to this use port, then
  ---  two conditions must be met Connected and allowed of of its provider ports.
  eq ConnectedAndAllowed(IdIx,p,empty,i,i',Is,Lx,Mx) = true .
  ceq ConnectedAndAllowed(IdIx,p,(Use ! ps),GUx,i,i',Is,Lx,Mx) = 
  Connected(IdIx,Use,IdentOfInstance(i),Lx,Mx)  and 
  Allowed(IdIx,Use,IdentOfInstance(i),i,Is,Lx,Mx)   and 
  ConnectedAndAllowed(IdIx,p,GUx,i,i',Is,Lx,Mx) 
  if  ((p in ps) and active(i,Use) == false and active(i',Use) == true  ).     
  --- in the previous condition we use active directly since it's a local treatment for the concerned configuration
  eq ConnectedAndAllowed(IdIx,p,(Use ! ps),GUx,i,i',Is,Lx,Mx) = ConnectedAndAllowed(IdIx,p,GUx,i,i',Is,Lx,Mx) [owise] .

  op Connected(_,_,_,_,_) : IdentInstances UsePort IdentInstance Connections MsgToUses -> Bool . 
  ---  connection must be verified on both user and provider instances
  eq Connected(IdIx,Use,Id1,empty,Mx) = false .
  ceq Connected(IdIx,Use,Id1,(Id1,Use,Id2,Pro),Lx,Mx) = true 
  if(Evaluation(IdIx,ExprIsConnected(Id2,(Id1,Use,Id2,Pro)),Mx,empty,(Id1,Use,Id2,Pro),Lx,nil )   == true ) .
  eq Connected(IdIx,Use1,IdentIns,(Id1,Use,Id2,Pro),Lx,Mx) = Connected(IdIx,Use1,IdentIns,Lx,Mx) [owise] .

  op Allowed(_,_,_,_,_,_) : IdentInstances UsePort  IdentInstance Instances Connections MsgToUses -> Bool . 
  --- also the provide port connected to this use port of the instance must not be refused
  eq Allowed(IdIx,Use,Id1,Is,empty,Mx) = false .
  eq Allowed(IdIx,Use,Id1,Is,(Id1,Use,Id2,Pro),Lx,Mx) = (Evaluation(IdIx,ExprRefusing(Id2,Pro),Mx,Is,empty,nil ) == false) . 
  eq Allowed(IdIx,Use1,IdentIns,Is,(Id1,Use,Id2,Pro),Lx,Mx) = Allowed(IdIx,Use1,IdentIns,Is,Lx,Mx) [owise] .

endfm




