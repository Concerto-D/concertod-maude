--------------------------------------------some ops used in the operating rules ------------------------------------------------
-------------------------------------- rules firing transition and entering place  --------------------------------------------------
 

fmod CONSISTENCY-PORTS-FIRING-TRANSITION is

  inc CONCERTO-D-CONFIGURATION .

  var NewM : Marking .
  var Is : Instances .
  vars Id1 Id2 : Id .
  var Use : UsePort .
  var Pro : ProvidePort .
  var Cs : Connections .
  var eState : Map{Question, Bool} .
  var Ids  : Ids .

  op isSafeToFire(_,_,_,_,_) : Ids Marking Instances Map{Question, Bool} Connections ->  Bool .
  ***( is used to ensure consistency when firing transitions.
    It takes as parameters when used in the firing transition rule: the set of
    identifiers for all instances of the concerned configuration (concerned by
    the firing of one of its instances), the new marking after firing, the 
    instances of the concerned configuration, Map{Question, Bool} of messages 
    to use for remote evaluation, finally, a subset of Connections related to
    the configuration, where the instance concerned by firing is a provider.
    Thus, for each connection it checks that the firing of the concerned
    instance (provider) does not affect the corresponding user i.e., if the
    provider for each connection after a firing goes from active to inactive,
    this implies that the user must be inactive. )
  eq isSafeToFire(Ids, NewM, Is, eState, (Id1, Use)--(Id2, Pro), Cs) = isSafeToFire(Ids, NewM, Is, eState, Cs) and 
  (
    ( (question([ dst: Id2 , query: isActive(Pro) ], 
               Ids, eState, Is, empty, nil) == true) and 
    (activeMarking(Is[Id2], Pro, NewM) == false)) 
    implies  (question([ dst: Id1 , query: isActive(Use) ], 
                      Ids, eState, Is, empty, nil ) == false) 
  ) .
  eq isSafeToFire(Ids, NewM, Is, eState, empty) = true .

endfm



fmod CONSISTENCY-PORTS-ENTERING-PLACE is

  inc CONCERTO-D-CONFIGURATION .

  var P : Place .
  var Ps : Places .
  var GU :  GroupUses .
  vars I I' : Instance .
  var Is : Instances .
  var Cs : Connections .
  var eState : Map{Question, Bool} .
  vars Use1 Use : UsePort .
  var Pro : ProvidePort .
  vars Id Id1 Id2 : Id .
  var Ids  : Ids .

  op isConnectedAndAllowed(_,_,_,_,_,_,_,_,_) : Ids Id Place GroupUses Instance Instance Instances Connections Map{Question, Bool} -> Bool . 
  ---  for the entering place rule, in addition to the 
  ---  isSatisfiedTransitionEndingStation condition on the choice of a station 
  ---  as an ending for a transition,
  ---  we need the satifaction of ConnectedProvidedAllowed
  ---  this function takes as parameters:
  ---  the set of identifiers for all instances of the concerned configuration 
  ---  (concerned by the firing of one of its instances)
  ---  the place concerned by the station chosen for the rule, 
  ---  the uses ports of the instance concerned by the rule, 
  ---  the instance itself before the rule is fired
  ---  the instance after the rule is fired 
  ---  the other instances of the configuration as well as its connections and 
  ---  the tuple Map{Question,Bool} of communication messages.
  ---  so for each use port of the instance concerned by the rule, we perform 
  ---  the following check:
  ---  if, by applying the rule, the status of this port is changed from 
  ---  inactive to active, 
  ---  knowing that the place of the function belongs to this use port, then
  ---  two conditions must be met Connected and allowed of of its provider 
  ---  ports.
  eq isConnectedAndAllowed(Ids, Id1, P, empty, I, I', Is, Cs, eState) = true .
  ceq isConnectedAndAllowed(Ids, Id1, P, 
                            g(Use ? Ps), GU, I, I', Is, Cs, eState) = 
  connected(Ids, Use, Id1, Cs, eState) and 
  allowed(Ids, Use, Id1, Is, Cs, eState) and 
  isConnectedAndAllowed(Ids ,Id1,P,GU,I,I',Is,Cs,eState) 
  if ((P in Ps) and isActiveLocal(I, Use) == false and isActiveLocal(I', Use) == true).     
  --- in the previous condition we use active directly since it's a local 
  --- treatment for the concerned configuration
  eq isConnectedAndAllowed(Ids,Id1,P,g(Use ? Ps),GU,I,I',Is,Cs,eState) = isConnectedAndAllowed(Ids,Id1,P,GU,I,I',Is,Cs,eState) [owise] .

  --- Helene I think here it cannot be changed to isConnectedLocal as using question
  --- same for allowed

  op connected(_,_,_,_,_) : Ids UsePort Id Connections Map{Question, Bool} -> Bool . 
  ---  connection must be verified on noValueYet user and provider instances
  ceq connected(Ids, Use, Id1, (Id1, Use)--(Id2, Pro), Cs, eState) = true 
  if(question([ dst: Id2 , query: isConnected((Id1, Use)--(Id2, Pro)) ], Ids, eState, empty, (Id1, Use)--(Id2, Pro), Cs, nil )   == true ) .
  eq connected(Ids, Use, Id1, Cs, eState) = false [owise] .

  op allowed(_,_,_,_,_,_) : Ids UsePort  Id Instances Connections Map{Question, Bool} -> Bool . 
  --- also the provide port connected to this use port of the instance must not be refused
  eq allowed(Ids, Use, Id1, Is, (Id1, Use)--(Id2, Pro), Cs, eState) = (question([ dst: Id2 , query: isRefusing(Pro) ], Ids, eState, Is, empty, nil) == false) . 
  eq allowed(Ids, Use, Id1, Is, Cs, eState) = false [owise] .  ---is not important since connected ensures that there is a connection.

endfm